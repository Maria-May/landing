{"pageProps":{"libId":"uikit","componentId":"breadcrumbs","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Breadcrumbs\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Breadcrumbs} from '@gravity-ui/uikit';\n```\n\n`Breadcrumbs` is a navigation element that shows the current location of a page within a websiteâ€™s hierarchy. It provides links that allow users to return to higher levels in the hierarchy, making it easier to navigate a site with multiple layers. Breadcrumbs are especially useful for large websites and applications with a hierarchical organization of pages.\n\n## Appearance\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Breadcrumbs\n    items={[\n        {\n            text: 'Region',\n            action: () => {},\n        },\n        {\n            text: 'Country',\n            action: () => {},\n        },\n        {\n            text: 'City',\n            action: () => {},\n        },\n        {\n            text: 'District',\n            action: () => {},\n        },\n        {\n            text: 'Street',\n            action: () => {},\n        },\n    ]}\n    firstDisplayedItemsCount={FirstDisplayedItemsCount.One}\n    lastDisplayedItemsCount={LastDisplayedItemsCount.One}\n/>\n`}\n>\n    <UIKit.Breadcrumbs\n        items={[\n            {\n                text: 'Region',\n                action: () => {},\n            },\n            {\n                text: 'Country',\n                action: () => {},\n            },\n            {\n                text: 'City',\n                action: () => {},\n            },\n            {\n                text: 'District',\n                action: () => {},\n            },\n            {\n                text: 'Street',\n                action: () => {},\n            },\n        ]}\n        firstDisplayedItemsCount={1}\n        lastDisplayedItemsCount={1}\n    />\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```jsx\nconst breadcrumbs = [\n  {\n    text: 'Region',\n    action: () => {},\n  },\n  {\n    text: 'Country',\n    action: () => {},\n  },\n  {\n    text: 'City',\n    action: () => {},\n  },\n  {\n    text: 'District',\n    action: () => {},\n  },\n  {\n    text: 'Street',\n    action: () => {},\n  },\n];\n\nreturn (\n  <Breadcrumbs\n    items={items}\n    firstDisplayedItemsCount={FirstDisplayedItemsCount.One}\n    lastDisplayedItemsCount={LastDisplayedItemsCount.One}\n  />\n);\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Custom divider\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Breadcrumbs\n    items={[\n        {\n            text: 'Region',\n            action: () => {},\n        },\n        {\n            text: 'Country',\n            action: () => {},\n        },\n        {\n            text: 'City',\n            action: () => {},\n        },\n        {\n            text: 'District',\n            action: () => {},\n        },\n        {\n            text: 'Street',\n            action: () => {},\n        },\n    ]}\n    renderItemDivider={() => '>'}\n    firstDisplayedItemsCount={FirstDisplayedItemsCount.One}\n    lastDisplayedItemsCount={LastDisplayedItemsCount.One}\n/>\n`}\n>\n    <UIKit.Breadcrumbs\n        items={[\n            {\n                text: 'Region',\n                action: () => {},\n            },\n            {\n                text: 'Country',\n                action: () => {},\n            },\n            {\n                text: 'City',\n                action: () => {},\n            },\n            {\n                text: 'District',\n                action: () => {},\n            },\n            {\n                text: 'Street',\n                action: () => {},\n            },\n        ]}\n        renderItemDivider={() => '>'}\n        firstDisplayedItemsCount={1}\n        lastDisplayedItemsCount={1}\n    />\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```jsx\nconst breadcrumbs = [\n  {\n    text: 'Region',\n    action: () => {},\n  },\n  {\n    text: 'Country',\n    action: () => {},\n  },\n  {\n    text: 'City',\n    action: () => {},\n  },\n  {\n    text: 'District',\n    action: () => {},\n  },\n  {\n    text: 'Street',\n    action: () => {},\n  },\n];\n\nreturn (\n  <Breadcrumbs\n    items={items}\n    renderItemDivider={() => '>'}\n    firstDisplayedItemsCount={FirstDisplayedItemsCount.One}\n    lastDisplayedItemsCount={LastDisplayedItemsCount.One}\n  />\n);\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Custom title\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Breadcrumbs\n    items={[\n        {\n            text: 'Region',\n            title: 'Custom title for Region',\n            action: () => {},\n        },\n        {\n            text: 'Country',\n            title: 'Custom title for Country',\n            action: () => {},\n        },\n        {\n            text: 'City',\n            title: 'Custom title for City',\n            action: () => {},\n        },\n        {\n            text: 'District',\n            title: 'Custom title for District',\n            action: () => {},\n        },\n        {\n            text: 'Street',\n            title: 'Custom title for Street',\n            action: () => {},\n        },\n    ]}\n    firstDisplayedItemsCount={FirstDisplayedItemsCount.One}\n    lastDisplayedItemsCount={LastDisplayedItemsCount.One}\n/>\n`}\n>\n    <UIKit.Breadcrumbs\n        items={[\n            {\n                text: 'Region',\n                title: 'Custom title for Region',\n                action: () => {},\n            },\n            {\n                text: 'Country',\n                title: 'Custom title for Country',\n                action: () => {},\n            },\n            {\n                text: 'City',\n                title: 'Custom title for City',\n                action: () => {},\n            },\n            {\n                text: 'District',\n                title: 'Custom title for District',\n                action: () => {},\n            },\n            {\n                text: 'Street',\n                title: 'Custom title for Street',\n                action: () => {},\n            },\n        ]}\n        firstDisplayedItemsCount={1}\n        lastDisplayedItemsCount={1}\n    />\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```jsx\nconst breadcrumbs = [\n  {\n    text: 'Region',\n    title: 'Custom title for Region',\n    action: () => {},\n  },\n  {\n    text: 'Country',\n    title: 'Custom title for Country',\n    action: () => {},\n  },\n  {\n    text: 'City',\n    title: 'Custom title for City',\n    action: () => {},\n  },\n  {\n    text: 'District',\n    title: 'Custom title for District',\n    action: () => {},\n  },\n  {\n    text: 'Street',\n    title: 'Custom title for Street',\n    action: () => {},\n  },\n];\n\nreturn (\n  <Breadcrumbs\n    items={items}\n    firstDisplayedItemsCount={FirstDisplayedItemsCount.One}\n    lastDisplayedItemsCount={LastDisplayedItemsCount.One}\n  />\n);\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Properties\n\n| Name                     | Description                                             | Type                                                                                                    | Default |\n| :----------------------- | :------------------------------------------------------ | :------------------------------------------------------------------------------------------------------ | :------ |\n| items                    | Breadcrumb item array                                   | `BreadcrumbsItem[]`                                                                                     |         |\n| className                | CSS class name of root element                          | `string`                                                                                                |         |\n| renderRootContent        | Custom render function of first item                    | `((item: BreadcrumbsItem, isCurrent: boolean) => React.ReactNode) \\| undefined`                         |         |\n| renderItemContent        | Custom render function of N+1 item                      | `((item: BreadcrumbsItem, isCurrent: boolean, isPrevCurrent: boolean) => React.ReactNode) \\| undefined` |         |\n| renderItemDivider        | Custom render function of items separator               | `(() => React.ReactNode) \\| undefined`                                                                  |         |\n| renderItem               | Custom render function of items                         | `(props: RenderBreadcrumbsItemProps<T>) => React.ReactNode) \\| undefined`                               |         |\n| firstDisplayedItemsCount | Number of items to display before item collapse control | `FirstDisplayedItemsCount.Zero \\| FirstDisplayedItemsCount.One`                                         |         |\n| lastDisplayedItemsCount  | Number of items to display after item collapse control  | `LastDisplayedItemsCount.One \\| LastDisplayedItemsCount.Two`                                            |         |\n| popupStyle               | Style of collapsed item popup                           | `\"staircase\" \\| undefined`                                                                              |         |\n| qa                       | HTML `data-qa` attribute, used in tests                 | `string`                                                                                                |         |\n\n### RenderBreadcrumbsItemProps`<T>`\n\n| Name          |       Type        |\n| :------------ | :---------------: |\n| children      | `React.ReactNode` |\n| item          |        `T`        |\n| isCurrent     |     `boolean`     |\n| isPrevCurrent |     `boolean`     |\n\n### BreadcrumbsItem\n\n| Name   | Description            | Type                                                                              | Default |\n| :----- | :--------------------- | :-------------------------------------------------------------------------------- | :------ |\n| text   | Breadcrumb content     | `string`                                                                          |         |\n| action | `click` event handler  | `React.MouseEventHandler<HTMLElement> \\| React.KeyboardEventHandler<HTMLElement>` |         |\n| href   | HTML `href` attribute  | `string \\| undefined`                                                             |         |\n| items  | Breadcrumb item array  | `BreadcrumbsItem[] \\| undefined`                                                  |         |\n| title  | HTML `title` attribute | `string \\| undefined`                                                             |         |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"}}},"initialLocale":"en","ns":["common","component"],"userConfig":{"i18n":{"locales":["en"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"default":{"i18n":{"locales":["en"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false}}}}},"__N_SSG":true}