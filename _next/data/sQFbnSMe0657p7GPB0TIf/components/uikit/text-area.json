{"pageProps":{"libId":"uikit","componentId":"text-area","readmeContent":"<!--GITHUB_BLOCK-->\n\n# TextArea\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {TextArea} from '@gravity-ui/uikit';\n```\n\n`TextArea` allow users to enter text into a UI.\n\n## Appearance\n\nThe `TextArea`'s appearance is controlled by the `view` and `pin` properties.\n\n### View\n\n`normal` - this is the main view of `TextArea` (used by default).\n\n<!--LANDING_BLOCK\n<ExampleBlock code={`<TextArea placeholder=\"Placeholder\" />`}>\n    <UIKit.TextArea placeholder=\"Placeholder\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n`clear` - this view could be used in case of using custom wrapper for `TextArea`.\n\n<!--LANDING_BLOCK\n<ExampleBlock code={`<TextArea view=\"clear\" placeholder=\"Placeholder\" />`}>\n    <UIKit.TextArea view=\"clear\" placeholder=\"Placeholder\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<TextArea view=\"normal\" />\n<TextArea view=\"clear\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Pin\n\nAllows you to control view of right and left edges of `TextArea`'s border.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<TextArea placeholder=\"Placeholder\" pin=\"round-brick\" />\n<TextArea placeholder=\"Placeholder\" pin=\"brick-brick\" />\n<TextArea placeholder=\"Placeholder\" pin=\"brick-round\" />\n`}\n>\n    <UIKit.TextArea placeholder=\"Placeholder\" pin=\"round-brick\" />\n    <UIKit.TextArea placeholder=\"Placeholder\" pin=\"brick-brick\" />\n    <UIKit.TextArea placeholder=\"Placeholder\" pin=\"brick-round\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<TextArea pin=\"round-brick\" />\n<TextArea pin=\"brick-brick\" />\n<TextArea pin=\"brick-round\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## States\n\n### Disabled\n\nThe state of the `TextArea` where you don't want the user to be able to interact with the component.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<TextArea placeholder=\"Placeholder\" disabled={true} />\n`}\n>\n    <UIKit.TextArea placeholder=\"Placeholder\" disabled={true} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<TextArea disabled />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Error\n\nThe state of the `TextArea` at which you want to show incorrect user input. To change `TextArea` appearance use the `validationState` property with `\"invalid\"` value.\nOptional message text can be added via `errorMessage` property.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<TextArea placeholder=\"Placeholder\" errorMessage=\"Error message\" validationState=\"invalid\" />\n<TextArea view=\"clear\" placeholder=\"Placeholder\" errorMessage=\"Error message\" validationState=\"invalid\" />\n`}\n>\n    <UIKit.TextArea placeholder=\"Placeholder\" errorMessage=\"Error message\" validationState=\"invalid\" />\n    <UIKit.TextArea view=\"clear\" placeholder=\"Placeholder\" errorMessage=\"Error message\" validationState=\"invalid\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<TextArea errorMessage=\"Error message\" validationState=\"invalid\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Size\n\n`s` – Used when standard controls are too big (tables, small cards).\n\n`m` – Basic size, used in most components.\n\n`l` – Basic controls performed in a page's header, modal windows, or pop-ups.\n\n`xl` – Used on promo and landing pages.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<TextArea placeholder=\"Placeholder\" size=\"s\" />\n<TextArea placeholder=\"Placeholder\" size=\"m\" />\n<TextArea placeholder=\"Placeholder\" size=\"l\" />\n<TextArea placeholder=\"Placeholder\" size=\"xl\" />\n`}\n>\n    <UIKit.TextArea placeholder=\"Placeholder\" size=\"s\" />\n    <UIKit.TextArea placeholder=\"Placeholder\" size=\"m\" />\n    <UIKit.TextArea placeholder=\"Placeholder\" size=\"l\" />\n    <UIKit.TextArea placeholder=\"Placeholder\" size=\"xl\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<TextArea size=\"s\" />\n<TextArea size=\"m\" />\n<TextArea size=\"l\" />\n<TextArea size=\"xl\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Rows management\n\nThe `TextArea`'s rows count is controlled by the `rows`, `minRows` and `maxRows` properties.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<TextArea placeholder=\"Placeholder\" size=\"s\" />\n`}\n>\n    <div>\n        rows = 2\n        <UIKit.TextArea placeholder=\"Placeholder\" rows={2} />\n    </div>\n    <div>\n        minRows = 2\n        <UIKit.TextArea placeholder=\"Placeholder\" minRows={2} />\n    </div>\n    <div>\n        maxRows = 2\n        <UIKit.TextArea placeholder=\"Placeholder\" maxRows={2} />\n    </div>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n## Properties\n\n| Name            | Description                                                                                                                         |                        Type                         |     Default     |\n| :-------------- | :---------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------: | :-------------: |\n| autoComplete    | The control's `autocomplete` attribute                                                                                              |                 `boolean` `string`                  |                 |\n| autoFocus       | The control's `autofocus` attribute                                                                                                 |                      `boolean`                      |                 |\n| className       | The control's wrapper class name                                                                                                    |                      `string`                       |                 |\n| controlProps    | The control's html attributes                                                                                                       | `React.TextareaHTMLAttributes<HTMLTextAreaElement>` |                 |\n| controlRef      | React ref provided to the control                                                                                                   |          `React.Ref<HTMLTextAreaElement>`           |                 |\n| defaultValue    | The control's default value. Use when the component is not controlled                                                               |                      `string`                       |                 |\n| disabled        | Indicates that the user cannot interact with the control                                                                            |                      `boolean`                      |     `false`     |\n| errorMessage    | Error text                                                                                                                          |                      `string`                       |                 |\n| hasClear        | Shows icon for clearing control's value                                                                                             |                      `boolean`                      |     `false`     |\n| id              | The control's `id` attribute                                                                                                        |                      `string`                       |                 |\n| maxRows         | The number of maximum visible text lines for the control. Ignored if `rows` is specified                                            |                      `number`                       |                 |\n| minRows         | The number of minimum visible text lines for the control. Ignored if `rows` is specified                                            |                      `number`                       |                 |\n| name            | The control's `name` attribute. Will be autogenerated if not specified                                                              |                      `string`                       |                 |\n| note            | An optional element displayed under the lower right corner of the control and sharing the place with the error container            |                  `React.ReactNode`                  |                 |\n| onBlur          | Fires when the control lost focus. Provides focus event as an callback's argument                                                   |                     `function`                      |                 |\n| onChange        | Fires when the input’s value is changed by the user. Provides change event as an callback's argument                                |                     `function`                      |                 |\n| onFocus         | Fires when the control gets focus. Provides focus event as an callback's argument                                                   |                     `function`                      |                 |\n| onKeyDown       | Fires when a key is pressed. Provides keyboard event as an callback's argument                                                      |                     `function`                      |                 |\n| onKeyUp         | Fires when a key is released. Provides keyboard event as an callback's argument                                                     |                     `function`                      |                 |\n| onUpdate        | Fires when the input’s value is changed by the user. Provides new value as an callback's argument                                   |                     `function`                      |                 |\n| pin             | The control's border view                                                                                                           |                      `string`                       | `\"round-round\"` |\n| placeholder     | Text that appears in the control when it has no value set                                                                           |                      `string`                       |                 |\n| qa              | Test id attribute (`data-qa`)                                                                                                       |                      `string`                       |                 |\n| rows            | The number of visible text lines for the control. If not specified, the hight will be automatically calculated based on the content |                      `number`                       |                 |\n| size            | The control's size                                                                                                                  |              `\"s\"` `\"m\"` `\"l\"` `\"xl\"`               |      `\"m\"`      |\n| tabIndex        | The control's `tabindex` attribute                                                                                                  |                      `string`                       |                 |\n| type            | The control's type                                                                                                                  |                      `string`                       |                 |\n| validationState | Validation state                                                                                                                    |                     `\"invalid\"`                     |                 |\n| value           | The control's value                                                                                                                 |                      `string`                       |                 |\n| view            | The control's view                                                                                                                  |                `\"normal\"` `\"clear\"`                 |   `\"normal\"`    |\n"},"__N_SSG":true}