{"pageProps":{"libId":"uikit","componentId":"popup","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Popup\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Popup} from '@gravity-ui/uikit';\n```\n\n`Popup` can be used to display floating content above the page. It is a wrapper around [Popper.js](https://popper.js.org)\nwith some defaults. To manage `Popup` visibility, use the `open` property.\nThe `Popup` child components are rendered inside the [`Portal`](../Portal) component. To disable this behavior, use the `disablePortal` property.\n\n## Anchor\n\nRef object of the DOM element is passed to the `anchorRef` property to create a `Popper.js` instance.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\nconst buttonRef = React.useRef(null);\nconst [open, setOpen] = React.useState(false);\n\n<Button ref={buttonRef} onClick={() => setOpen((prevOpen) => !prevOpen)}>\n  Toggle Popup\n</Button>\n<Popup anchorRef={buttonRef} open={open} placement=\"bottom\">\n  Content\n</Popup>\n`}>\n    <UIKitExamples.PopupAnchorExample/>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nconst buttonRef = React.useRef(null);\nconst [open, setOpen] = React.useState(false);\n\n<Button ref={buttonRef} onClick={() => setOpen((prevOpen) => !prevOpen)}>\n  Toggle Popup\n</Button>\n<Popup anchorRef={buttonRef} open={open} placement=\"bottom\">\n  Content\n</Popup>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Placement\n\nUse `placement` property to control `Popup` position around the anchor element.\nAccept all values from `Popper.js` [placement](https://popper.js.org/docs/v2/constructors/#options).\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\nconst boxRef = React.useRef(null);\n\n<div ref={boxRef} />\n<Popup open anchorRef={boxRef} placement=\"top-start\">Top Start</Popup>\n<Popup open anchorRef={boxRef} placement=\"top\">Top</Popup>\n<Popup open anchorRef={boxRef} placement=\"top-end\">Top End</Popup>\n<Popup open anchorRef={boxRef} placement=\"right-start\">Right Start</Popup>\n<Popup open anchorRef={boxRef} placement=\"right\">Right</Popup>\n<Popup open anchorRef={boxRef} placement=\"right-end\">Right End</Popup>\n<Popup open anchorRef={boxRef} placement=\"bottom-end\">Bottom End</Popup>\n<Popup open anchorRef={boxRef} placement=\"bottom\">Bottom</Popup>\n<Popup open anchorRef={boxRef} placement=\"bottom-start\">Bottom Start</Popup>\n<Popup open anchorRef={boxRef} placement=\"left-end\">Left End</Popup>\n<Popup open anchorRef={boxRef} placement=\"left\">Left</Popup>\n<Popup open anchorRef={boxRef} placement=\"left-start\">Left Start</Popup>\n`}>\n    <UIKitExamples.PopupPlacementExample/>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## Properties\n\n| Name                 | Description                                                                        |                   Type                   |     Default     |\n| :------------------- | :--------------------------------------------------------------------------------- | :--------------------------------------: | :-------------: |\n| altBoundary          | `altBoundary` parameter for `Popper.js` `offset` modifier                          |                `boolean`                 |     `false`     |\n| anchorRef            | `Popper.js` anchor element. Can also be `popper.VirtualElement`                    |             `PopupAnchorRef`             |                 |\n| autoFocus            | While open, the focus will be set to the first interactive element in the content  |                `boolean`                 |     `false`     |\n| children             | Any React content                                                                  |            `React.ReactNode`             |                 |\n| className            | HTML `class` attribute for root node                                               |                 `string`                 |                 |\n| container            | DOM element children to be mounted to                                              |              `HTMLElement`               | `document.body` |\n| contentClassName     | HTML `class` attribute for content node                                            |                 `string`                 |                 |\n| disableEscapeKeyDown | Do not trigger close on `Esc`                                                      |                `boolean`                 |     `false`     |\n| disableLayer         | Do not use `LayerManager` on stacking popups                                       |                `boolean`                 |     `false`     |\n| disableOutsideClick  | Do not trigger close on outside clicks                                             |                `boolean`                 |     `false`     |\n| disablePortal        | Do not use `Portal` for children                                                   |                `boolean`                 |     `false`     |\n| focusTrap            | Enable focus trapping behavior                                                     |                `boolean`                 |     `false`     |\n| hasArrow             | Render an arrow pointing to the anchor                                             |                `boolean`                 |     `false`     |\n| id                   | HTML `id` attribute                                                                |                 `string`                 |                 |\n| keepMounted          | `Popup` will not be removed from the DOM upon hiding                               |                `boolean`                 |     `false`     |\n| modifiers            | `Popper.js` modifiers in addition to default: `arrow`, `offset`, `flip`            |                 `Array`                  |    `[0, 4]`     |\n| offset               | `Popper.js` offset                                                                 |            `[number, number]`            |    `[0, 4]`     |\n| onBlur               | `blur` event handler                                                               |                `Function`                |                 |\n| onClose              | Handle `Popup` close event                                                         |                `Function`                |                 |\n| onEnterKeyDown       | `Enter` press event handler                                                        |                `Function`                |                 |\n| onEscapeKeyDown      | `Esc` press event handler                                                          |                `Function`                |                 |\n| onFocus              | `focus` event handler                                                              |                `Function`                |                 |\n| onMouseEnter         | `mouseenter` event handler                                                         |                `Function`                |                 |\n| onMouseLeave         | `mouseleave` event handler                                                         |                `Function`                |                 |\n| onOutsideClick       | Outside click event handler                                                        |                `Function`                |                 |\n| onTransitionEnter    | On start open popup animation                                                      |                `Function`                |                 |\n| onTransitionEntered  | On finish open popup animation                                                     |                `Function`                |                 |\n| onTransitionExit     | On start close popup animation                                                     |                `Function`                |                 |\n| onTransitionExited   | On finish close popup animation                                                    |                `Function`                |                 |\n| open                 | Manages `Popup` visibility                                                         |                `boolean`                 |     `false`     |\n| placement            | `Popper.js` placement                                                              | `PopupPlacement` `Array<PopupPlacement>` |                 |\n| qa                   | Test attribute (`data-qa`)                                                         |                 `string`                 |                 |\n| restoreFocus         | If true, the focus will return to the anchor element                               |                `boolean`                 |     `false`     |\n| restoreFocusRef      | Element the focus will be restored to                                              |            `React.RefObject`             |                 |\n| aria-labelledby      | `aria-labelledby` attribute, prefer this attribute if you have visible caption     |                 `string`                 |                 |\n| aria-label           | `aria-label` attribute, use this attribute only if you didn't have visible caption |                 `string`                 |                 |\n| role                 | `aria-role` attribute                                                              |                 `string`                 |                 |\n| strategy             | `Popper.js` positioning strategy                                                   |       `popper.PositioningStrategy`       |    `[0, 4]`     |\n| style                | HTML `style` atribute for root node                                                |                 `string`                 |                 |\n\n## CSS API\n\n| Name                         | Description      |\n| :--------------------------- | :--------------- |\n| `--g-popup-background-color` | Background color |\n| `--g-popup-border-color`     | Border color     |\n| `--g-popup-border-width`     | Border width     |\n","_nextI18Next":{"initialI18nStore":{"ru":{"common":{"actions_open":"Открыть","actions_copyToClipboard":"Копировать в буфер обмена","actions_share":"Поделиться","actions_github":"GitHub","actions_storybook":"Storybook","menu_libraries":"Библиотеки","menu_components":"Компоненты","menu_design":"Дизайн","menu_icons":"Иконки","roadmap_inProgress":"В работе","navigation_previous":"Назад","navigation_next":"Далее","emptySearchPlaceholder":"Ничего не найдено"},"component":{"actions_openInFigma":"Открыть в Figma","title":"Компоненты","searchPlaceholder":"Поиск по названию"}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_icons":"Icons","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name"}}},"initialLocale":"ru","ns":["common","component"],"userConfig":{"i18n":{"locales":["en","ru"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"default":{"i18n":{"locales":["en","ru"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false}}}}},"__N_SSG":true}