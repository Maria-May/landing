{"pageProps":{"libId":"uikit","componentId":"toaster","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Toaster\n\n<!--/GITHUB_BLOCK-->\n\nComponent for adjustable notifications.\n\n## Usage with context\n\n```jsx\nimport React from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport {ToasterComponent, ToasterProvider} from '@gravity-ui/uikit';\n\nconst root = ReactDOMClient.createRoot(document.getElementById('root'));\nroot.render(\n  <ToasterProvider>\n    <App />\n    <ToasterComponent className=\"optional additional classes\" />\n  </ToasterProvider>,\n);\n```\n\nThen in your app components you can show toasts with `useToaster` hook.\n\n```jsx\nimport {useToaster} from '@gravity-ui/uikit';\nimport {useEffect} from 'react';\n\nexport function FoobarComponent() {\n  const {add} = useToaster();\n\n  useEffect(() => {\n    add({\n      title: 'Toaster is here',\n    });\n  }, []);\n\n  return null;\n}\n```\n\nHook returns methods `add`, `update`, `remove` and `removeAll` (see below).\n\n## Usage as HOC\n\nFor class components, you can use the `withToaster` HOC, which will inject the `toaster`\nprop into the component.\n\n```jsx\nimport {Component} from 'react';\nimport {withToaster} from '@gravity-ui/uikit';\n\nclass FoobarComponent extends Component {\n  render() {\n    this.props.toaster.add({});\n  }\n}\n\nconst FoobarWithToaster = withToaster()(FoobarComponent);\n```\n\n## Usage as singleton\n\nToaster has singleton, so when it is initialized in different parts of the application, the same instance will be returned.\nOn initialization, it is possible to transmit a className that will be assigned to dom-element which wrap all toasts.\n\n### React < 18\n\n```js\nimport {Toaster} from '@gravity-ui/uikit';\nconst toaster = new Toaster();\n```\n\nor\n\n```js\nimport {toaster} from '@gravity-ui/uikit/toaster-singleton';\n```\n\n### React 18\n\n```js\nimport ReactDOMClient from 'react-dom/client';\nimport {Toaster} from '@gravity-ui/uikit';\nToaster.injectReactDOMClient(ReactDOMClient);\nconst toaster = new Toaster();\n```\n\nor\n\n```js\nimport {toaster} from '@gravity-ui/uikit/toaster-singleton-react-18';\n```\n\n## Constructor arguments\n\n| Parameter | Type      | Default     | Description                                         |\n| :-------- | :-------- | :---------- | :-------------------------------------------------- |\n| className | `string`  | `undefined` | Custom class name to add to the component container |\n| mobile    | `boolean` | `false`     | Configuration that manages mobile/desktop views     |\n\n## Methods\n\n| Method name                   | Params             | Description                                                                                                                                   |\n| :---------------------------- | :----------------- | :-------------------------------------------------------------------------------------------------------------------------------------------- |\n| add(toastOptions)             | `Object`           | Creates a new notification                                                                                                                    |\n| remove(name)                  | `string`           | Manually deletes an existing notification                                                                                                     |\n| update(name, overrideOptions) | `string`, `Object` | Changes already rendered notification content. In `overrideOptions`, the following fields are optional: `title`, `type`, `content`, `actions` |\n| has(name)                     | `string`           | Checks fora toast with the given name in the list of displayed toasts                                                                         |\n\n## More about `add`\n\nAccepts the argument `toastOptions` with ongoing notification details:\n\n| Parameter  | Type                                    | Required | Default     | Description                                                                                                                                                                                                                              |\n| :--------- | :-------------------------------------- | :------- | :---------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| name       | `string`                                | yes      |             | A unique notification name. Notifications with identical names are collapsed into one                                                                                                                                                    |\n| title      | `string`                                |          |             | Notification title                                                                                                                                                                                                                       |\n| className  | `string`                                |          |             | CSS-class                                                                                                                                                                                                                                |\n| autoHiding | `number` or `false`                     |          | 5000        | Number of ms to delay before hiding the notification. Use `false` to disable toast hiding after timeout.                                                                                                                                 |\n| content    | `node`                                  |          | `undefined` | Notification content. [Anything that can be rendered: numbers, strings, elements or an array](https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes)                                                                       |\n| theme      | `string`                                |          | `\"normal\"`  | A notification theme. Possible values: `\"normal\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `danger`, `\"utility\"`. If `theme` is set to other than `\"normal\"`, the icon will be added into notification title. _By default, there is no icon_ |\n| isClosable | `boolean`                               |          | `true`      | A configuration that manages the visibility of the X icon, which allows the user to close the notification                                                                                                                               |\n| actions    | `ToastAction[]`                         |          | `undefined` | An array of [actions](./types.ts#L9) that display after `content`                                                                                                                                                                        |\n| renderIcon | `(toastProps: ToastProps) => ReactNode` |          | `undefined` | Used to customize the toast icon. Type-based behavior is used by default                                                                                                                                                                 |\n\nEvery `action` is an object with following parameters:\n\n| Parameter        | Type                                      | Required | Default    | Description                                                             |\n| :--------------- | :---------------------------------------- | :------- | :--------- | :---------------------------------------------------------------------- |\n| label            | `string`                                  | yes      |            | Description of action                                                   |\n| onClick          | `() => void`                              | yes      |            | On action click handler                                                 |\n| view             | [`ButtonView`](../Button/README.md#props) |          | `outlined` | The appearance of the action, the same as the `view` of the `<Button/>` |\n| removeAfterClick | `boolean`                                 |          | `true`     | If the notification should close after the action is clicked            |\n\n## CSS API\n\n| Name                       | Description     |\n| :------------------------- | :-------------- |\n| `--g-toaster-width`        | Container width |\n| `--g-toaster-item-padding` | Item padding    |\n| `--g-toaster-item-gap`     | Item gap        |\n","_nextI18Next":{"initialI18nStore":{"ru":{"common":{"actions_open":"Открыть","actions_copyToClipboard":"Копировать в буфер обмена","actions_share":"Поделиться","actions_github":"GitHub","actions_storybook":"Storybook","menu_libraries":"Библиотеки","menu_components":"Компоненты","menu_design":"Дизайн","menu_icons":"Иконки","roadmap_inProgress":"В работе","navigation_previous":"Назад","navigation_next":"Далее","emptySearchPlaceholder":"Ничего не найдено"},"component":{"actions_openInFigma":"Открыть в Figma","title":"Компоненты","searchPlaceholder":"Поиск по названию"}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_icons":"Icons","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name"}}},"initialLocale":"ru","ns":["common","component"],"userConfig":{"i18n":{"locales":["en","ru"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"default":{"i18n":{"locales":["en","ru"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false}}}}},"__N_SSG":true}