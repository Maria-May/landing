{"pageProps":{"libId":"uikit","componentId":"table","readmeContent":"<!--GITHUB_BLOCK-->\n\n## Table\n\n<!--/GITHUB_BLOCK-->\n\n```jsx\nimport {Table} from '@gravity-ui/uikit';\n```\n\nA table that allows selecting and sorting rows and performing actions on a row.\n\n<!--GITHUB_BLOCK-->\n\nAdditional functionality is enabled via HOCs:\n\n- [withTableActions](#withtableactions)\n- [withTableCopy](#withtablecopy)\n- [withTableSelection](#withtableselection)\n- [withTableSettings](#withtablesettings)\n- [withTableSorting](#withtablesorting)\n\n<!--/GITHUB_BLOCK-->\n\n## Properties\n\n| Name             | Description                                                                                                                                            |                                        Type                                        |   Default   |\n| :--------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------: | :---------: |\n| data             | Data                                                                                                                                                   |                                      `any[]`                                       |             |\n| columns          | Column parameters                                                                                                                                      |                               `TableColumnConfig[]`                                |             |\n| verticalAlign    | Vertical alignment of contents                                                                                                                         |                                 `\"top\"` `\"middle\"`                                 |             |\n| getRowId         | Row ID. Used when selecting and sorting rows. If you pass a row, its ID will be the value of the field in the row data named the same as the column ID |                 `string` `((item: any, index: number) => string)`                  |             |\n| getRowClassNames | Row CSS classes                                                                                                                                        |                      `(item: any, index: number) => string[]`                      |             |\n| isRowDisabled    | Condition for disabling columns                                                                                                                        |                      `(item: any, index: number) => boolean`                       |             |\n| onRowClick       | Row click handler                                                                                                                                      | `(item: any, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void` |             |\n| onRowMouseEnter  | Row mouseenter handler                                                                                                                                 | `(item: any, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void` |             |\n| onRowMouseLeave  | Row mouseleave handler                                                                                                                                 | `(item: any, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void` |             |\n| emptyMessage     | Message returned if data is missing.                                                                                                                   |                                      `string`                                      | `\"No data\"` |\n| className        | Table CSS class                                                                                                                                        |                                      `string`                                      |             |\n| edgePadding      | Adds horizontal padding for edge cells                                                                                                                 |                                     `boolean`                                      |             |\n\n### TableColumnConfig\n\n| Name                             | Description                                                                                                                                                            |                            Type                            |                           Default                           |\n| :------------------------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------: | :---------------------------------------------------------: |\n| id                               | Column ID                                                                                                                                                              |                          `any[]`                           |                                                             |\n| name                             | Column name (header)                                                                                                                                                   |             `string` `(() => React.ReactNode)`             |                          column ID                          |\n| placeholder                      | Stub in the event there is no data in a cell                                                                                                                           | `string` `((item: any, index: number) => React.ReactNode)` |                        `â€” (&mdash;)`                        |\n| template                         | Cell contents. If you pass a row, the cell contents will be the value of the field named the same as this row                                                          | `string` `((item: any, index: number) => React.ReactNode)` | The value of the field with the name equal to the column ID |\n| align                            | Content alignment                                                                                                                                                      |               `\"left\"` `\"center\"` `\"right\"`                |                                                             |\n| sticky                           | Sticky column                                                                                                                                                          |                     `\"left\"` `\"right\"`                     |                                                             |\n| primary                          | Distinguishes a column among othe                                                                                                                                      |                         `boolean`                          |                                                             |\n| width                            | Column width in px                                                                                                                                                     |                          `number`                          |                                                             |\n| stickyHorizontalScroll           | Horizontal sticky scroll in a table. Note: A table can't have a fixed height and sticky scroll at the same time. A sticky scroll won't work if a table has an overflow |                         `boolean`                          |                           `false`                           |\n| stickyHorizontalScrollBreakpoint | Threshold that the parent block should pass to make a scroll sticky. Helpful, for example, in the console when the groupActions bar closes the scroll                  |                          `number`                          |                             `0`                             |\n| meta                             | Various data, HOC settings                                                                                                                                             |                   `Record<string, any>`                    |                                                             |\n\n## Usage with HOC `withTableActions`\n\nAdds a special column with actions to table columns.\n\n### Properties\n\n| Name           | Description                                 |                        Type                         |\n| :------------- | :------------------------------------------ | :-------------------------------------------------: |\n| getRowActions  | Array of action configs for each row        | `(item: any, index: number) => TableActionConfig[]` |\n| rowActionsSize | Size of actions button and popup menu items |              `\"s\"` `\"m\"` `\"l\"` `\"xl\"`               |\n\n### TableActionConfig\n\n```ts\ntype TableActionConfig = TableAction | TableActionGroup;\n```\n\n#### TableAction\n\n| Name     | Description     |                 Type                 |  Default   |\n| :------- | :-------------- | :----------------------------------: | :--------: |\n| text     | Text            |               `string`               |            |\n| handler  | Click handler   | `(item: any, index: number) => void` |            |\n| disabled | Action disabled |              `boolean `              |            |\n| theme    | Theme           |        `\"normal\"` `\"danger\"`         | `\"normal\"` |\n\n#### TableActionGroup\n\n| Name  | Description         |         Type          |\n| :---- | :------------------ | :-------------------: |\n| title | Action group header |       `string`        |\n| items | Action group items  | `TableActionConfig[]` |\n\n### Example\n\n```jsx\nimport {Table, withTableActions} from '@gravity-ui/uikit';\n\nconst MyTable = withTableActions(Table);\nconst data = [\n    {id: 1, text: 'Hello'},\n    {id: 2, text: 'World'},\n];\nconst columns = [\n    {id: 'id'},\n    {id: 'text'},\n];\nconst getRowActions = () => {\n    return [\n        {\n            text: 'Print', handler: () => {\n            }\n        },\n        {\n            text: 'Remove', handler: () => {\n            }, theme: 'danger'\n        },\n    ];\n}\n\nconst table = (\n    <MyTable\n        data={data}\n        columns{columns}\n        getRowActions={getRowActions}\n    />\n);\n```\n\n## Usage with HOC `withTableCopy`\n\nAllows copying the contents of a cell or any text.\n\n### ColumnMeta\n\n| Name | Description                                               |                                            Type                                             |\n| :--- | :-------------------------------------------------------- | :-----------------------------------------------------------------------------------------: |\n| copy | Text to copy. If true is passed, cell contents are copied | `boolean` `((item: any, index: number) => string)` `((item: any, index: number) => number)` |\n\n### Example\n\n```jsx\nimport {Table, withTableCopy} from '@gravity-ui/uikit';\n\nconst MyTable = withTableCopy(Table);\nconst data = [\n    {id: 1, text: 'Hello'},\n    {id: 2, text: 'World'},\n];\nconst columns = [\n    {id: 'id', meta: {copy: ({id}) => `ID #${id}`}},\n    {id: 'text', meta: {copy: true}},\n];\n\nconst table = (\n    <MyTable\n        data={data}\n        columns{columns}\n    />\n);\n```\n\n## Usage with HOC `withTableSelection`\n\nEnables selecting table rows.\n\n### Properties\n\n| Name              | Description                 |           Type            |\n| :---------------- | :-------------------------- | :-----------------------: |\n| selectedIds       | Rows selected               |        `string[]`         |\n| onSelectionChange | Selected row change handler | `(ids: string[]) => void` |\n\n### Example\n\n```jsx\nimport {Table, withTableSelection} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSelection(Table);\nconst data = [\n    {id: 1, text: 'Hello'},\n    {id: 2, text: 'World'},\n];\nconst columns = [\n    {id: 'id'},\n    {id: 'text'},\n];\nconst getRowId = 'id';\n\nfunction SelectionTable() {\n    const [selectedIds, setSelectedIds] = React.useState([1]);\n\n    return (\n        <MyTable\n            data={data}\n            columns{columns}\n            getRowId={getRowId}\n            selectedIds={selectedIds}\n            onSelectionChange={setSelectedIds}\n        />\n    );\n}\n```\n\n## Usage with HOC `withTableSettings`\n\nEnables functionality for table column settings.\n\n### ColumnMeta\n\n| Name              | Description                                                            |   Type    | Default |\n| :---------------- | :--------------------------------------------------------------------- | :-------: | :-----: |\n| selectedByDefault | Specifies whether a column is selected if it's missing in the settings | `boolean` | `true`  |\n| selectedAlways    | The column is always selected, you can't change its visibility         | `boolean` | `false` |\n\n### Properties\n\n| Name               | Description                   |                     Type                     |\n| :----------------- | :---------------------------- | :------------------------------------------: |\n| settingsPopupWidth | TableColumnSetup pop-up width |                   `string`                   |\n| settings           | Current settings              |             `TableSettingsData`              |\n| updateSettings     | Settings update handl         | `(data: TableSettingsData) => Promise<void>` |\n\n### TableSettingsData\n\n```ts\ntype TableSettingsData = Array<{\n  id: string;\n  isSelected?: boolean;\n}>;\n```\n\n### Example\n\n```jsx\nimport {Table, withTableSettings} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSettings(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\n\nfunction SelectionTable() {\n  const initialSettings = [\n    {id: 'id', isSelected: false},\n    {id: 'text', isSelected: true},\n  ];\n  const [settings, setSettings] = React.useState(initialSettings);\n\n  return (\n    <MyTable\n      data={data}\n      columns={columns}\n      settings={settings}\n      updateSettings={(settings) => {\n        setSettings(settings);\n        return Promise.resolve();\n      }}\n    />\n  );\n}\n```\n\n## Usage with HOC `withTableSorting`\n\nEnables column sorting.\n\n### ColumnMeta\n\n| Name             | Description                                                                                                                                                   |                       Type                       | Default |\n| :--------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------ | :----------------------------------------------: | :-----: |\n| defaultSortOrder | Sets the primary sorting order                                                                                                                                |                 `\"asc\"` `\"desc\"`                 |  `asc`  |\n| sort             | Sorting function. It should return a value for sorting in ascending order. If true is passed, cell values are compared and sorting is done in ascending order | `boolean` `((itemA: any, itemB: any) => number)` |         |\n\n### Properties\n\n| Name              | Description                                         |                 Type                  |\n| :---------------- | :-------------------------------------------------- | :-----------------------------------: |\n| defaultSortState  | Default sorting state for an uncontrolled component |           `TableSortState`            |\n| sortState         | Sorting state                                       |           `TableSortState`            |\n| onSortStateChange | Sorting state change handle                         | `(sortState: TableSortState) => void` |\n\nIf the `sortState` and `onSortStateChange` props are not passed, the sorting state is stored in the component itself.\n\n### TableSortState\n\n```ts\ntype TableSortState = Array<{\n  column: string;\n  order: 'asc' | 'desc';\n}>;\n```\n\n### Example\n\n```jsx\nimport {Table, withTableSorting} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSorting(Table);\nconst data = [\n    {id: 1, text: 'Hello', date: '2016-10-25'},\n    {id: 2, text: 'World', date: '2020-08-15'},\n];\nconst columns = [\n    {id: 'id', meta: {sort: true}},\n    {id: 'text', meta: {defaultSortOrder: 'desc', sort: (a, b) => Date.parse(a.date) - Date.parse(b.date)}},\n];\n\nconst table = (\n    <MyTable\n        data={data}\n        columns{columns}\n    />\n);\n```\n"},"__N_SSG":true}