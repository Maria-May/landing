{"pageProps":{"libId":"uikit","componentId":"tabs","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Tabs\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Tabs} from '@gravity-ui/uikit';\n```\n\nTabs is used to explore, organize content and switch between different views.\n\n## Items\n\nFor render tabs items you can use `items` property.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Tabs\n    activeTab=\"first\"\n    items={[\n        {id: 'first', title: 'First Tab'},\n        {id: 'second', title: 'Second Tab'},\n        {id: 'third', title: 'Third Tab', disabled: true},\n    ]}\n/>\n`}\n>\n    <UIKit.Tabs\n        activeTab=\"first\"\n        items={[\n            {id: 'first', title: 'First Tab'},\n            {id: 'second', title: 'Second Tab'},\n            {id: 'third', title: 'Third Tab', disabled: true},\n        ]}\n    />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nconst [activeTab, setActiveTab] = React.useState('second');\n\nreturn (\n  <Tabs\n    activeTab={activeTab}\n    onSelectTab={(tabId) => setActiveTab(tabId)}\n    items={[\n      {id: 'first', title: 'First Tab'},\n      {id: 'second', title: 'Second Tab'},\n      {id: 'third', title: 'Disabled Tab', disabled: true},\n    ]}\n  />\n);\n```\n\n<!--/GITHUB_BLOCK-->\n\nAlso `Tabs` has dedicated component `Tabs.Item` for an item.\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nconst [activeTab, setActiveTab] = React.useState('second');\n\nreturn (\n  <Tabs activeTab={activeTab}>\n    <Tabs.Item id={'first'} title=\"Third Tab\" onClick={(tabId) => setActiveTab(tabId)} />\n    <Tabs.Item id={'second'} title=\"Active Tab\" onClick={(tabId) => setActiveTab(tabId)} />\n  </Tabs>\n);\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Size\n\nTo control the size of the `Tabs` use the `size` property. Default size is `m`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Tabs\n    activeTab=\"second\"\n    size=\"m\"\n    items={[\n        {id: 'first', title: 'M Size first'},\n        {id: 'second', title: 'M Size second'},\n    ]}\n/>\n\n<Tabs\n    activeTab=\"second\"\n    size=\"l\"\n    items={[\n        {id: 'first', title: 'L Size first'},\n        {id: 'second', title: 'L Size second'},\n    ]}\n/>\n\n<Tabs\n    activeTab=\"second\"\n    size=\"xl\"\n    items={[\n        {id: 'first', title: 'XL Size first'},\n        {id: 'second', title: 'XL Size second'},\n    ]}\n/>\n`}\n>\n    <UIKit.Tabs\n        activeTab=\"second\"\n        size=\"m\"\n        items={[\n            {id: 'first', title: 'M Size first'},\n            {id: 'second', title: 'M Size second'},\n        ]}\n    />\n    <UIKit.Tabs\n        activeTab=\"second\"\n        size=\"l\"\n        items={[\n            {id: 'first', title: 'L Size first'},\n            {id: 'second', title: 'L Size second'},\n        ]}\n    />\n    <UIKit.Tabs\n        activeTab=\"second\"\n        size=\"xl\"\n        items={[\n            {id: 'first', title: 'XL Size first'},\n            {id: 'second', title: 'XL Size second'},\n        ]}\n    />\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Tabs\n    activeTab=\"second\"\n    size=\"m\"\n    items={[\n        {id: 'first', title: 'M Size first'},\n        {id: 'second', title: 'M Size second'},\n    ]}\n/>\n\n<Tabs\n    activeTab=\"second\"\n    size=\"l\"\n    items={[\n        {id: 'first', title: 'L Size first'},\n        {id: 'second', title: 'L Size second'},\n    ]}\n/>\n\n<Tabs\n    activeTab=\"second\"\n    size=\"xl\"\n    items={[\n        {id: 'first', title: 'XL Size first'},\n        {id: 'second', title: 'XL Size second'},\n    ]}\n/>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Tabs.Item\n\nUsed for render tabs item.\n\n### Icon\n\nUsed if you need to display an icon for a tabs item.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Tabs activeTab=\"first\">\n    <Tabs.Item\n        icon={<Icon size={16} data={GearIcon} />}\n        id=\"first\"\n        title=\"Tab with icon\"\n        onClick={() => {}}\n    />\n    <Tabs.Item id=\"second\" title=\"Tab without icon\" onClick={() => {}} />\n</Tabs>\n`}\n>\n    <UIKit.Tabs activeTab=\"first\">\n        <UIKit.Tabs.Item\n            icon={\n                <UIKit.Icon data={() => (\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n                )} size={16} />\n            }\n            id=\"first\"\n            title=\"Tab with icon\"\n            onClick={() => {}}\n        />\n        <UIKit.Tabs.Item id=\"second\" title=\"Tab without icon\" onClick={() => {}} />\n    </UIKit.Tabs>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Tabs activeTab=\"first\">\n  <Tabs.Item\n    icon={<Icon size={16} data={GearIcon} />}\n    id=\"first\"\n    title=\"Tab with icon\"\n    onClick={() => {}}\n  />\n  <Tabs.Item id=\"second\" title=\"Tab without icon\" onClick={() => {}} />\n</Tabs>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### States\n\nTabs item has disabled flag.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Tabs activeTab=\"first\">\n    <Tabs.Item id=\"first\" title=\"First Tab\" onClick={() => {}} />\n    <Tabs.Item disabled id=\"second\" title=\"Disabled Tab\" onClick={() => {}} />\n</Tabs>\n`}\n>\n    <UIKit.Tabs activeTab=\"first\">\n        <UIKit.Tabs.Item id=\"first\" title=\"First Tab\" onClick={() => {}} />\n        <UIKit.Tabs.Item disabled id=\"second\" title=\"Disabled Tab\" onClick={() => {}} />\n    </UIKit.Tabs>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Tabs activeTab=\"first\">\n  <Tabs.Item id=\"first\" title=\"First Tab\" onClick={() => {}} />\n  <Tabs.Item disabled id=\"second\" title=\"Disabled Tab\" onClick={() => {}} />\n</Tabs>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Counter\n\nUsed if you need to display a number for a tabs item.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Tabs activeTab=\"first\">\n    <Tabs.Item id=\"first\" title=\"First Tab\" onClick={() => {}} counter={13} />\n    <Tabs.Item id=\"second\" title=\"Second Tab\" onClick={() => {}} counter={3} />\n</Tabs>\n`}\n>\n    <UIKit.Tabs activeTab=\"first\">\n        <UIKit.Tabs.Item id=\"first\" title=\"First Tab\" onClick={() => {}} counter={13} />\n        <UIKit.Tabs.Item id=\"second\" title=\"Second Tab\" onClick={() => {}} counter={3} />\n    </UIKit.Tabs>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Tabs activeTab=\"first\">\n  <Tabs.Item id=\"first\" title=\"First Tab\" onClick={() => {}} counter={13} />\n  <Tabs.Item id=\"second\" title=\"Second Tab\" onClick={() => {}} counter={3} />\n</Tabs>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Tabs.Item properties\n\n| Name     | Description                    |            Type            | Default |\n| :------- | ------------------------------ | :------------------------: | :-----: |\n| id       | Tab ID                         |          `string`          |         |\n| title    | Tab title                      | `string` `React.ReactNode` |         |\n| meta     | Tab description                |          `string`          |         |\n| hint     | HTML title attribute           |          `string`          |         |\n| icon     | Icon displayed at the start    |     `React.ReactNode`      |         |\n| counter  | Number displayed at the end    |     `React.ReactNode`      |         |\n| label    | `<Label>` displayed at the end |     `React.ReactNode`      |         |\n| disabled | Inactive state                 |         `boolean`          |         |\n\n## Properties\n\n| Name             | Description                                                          |                                    Type                                    |   Default    |\n| :--------------- | :------------------------------------------------------------------- | :------------------------------------------------------------------------: | :----------: |\n| direction        | Tab direction (deprecated)                                           |                                  `string`                                  | `horizontal` |\n| activeTab        | Active tab ID                                                        |                                  `string`                                  |              |\n| allowNotSelected | Allows `activeTab` to be undefined                                   |                                 `boolean`                                  |              |\n| items            | Tabs array                                                           |                             `TabsItemProps[]`                              |     `[]`     |\n| onSelectTab      | Select tab handler                                                   |                    `onSelectTab?(tabId: string): void`                     |              |\n| wrapTo           | Allows to wrap `TabItem` into another component or render custom tab | `wrapTo?(item: TabsItemProps, node: React.ReactNode, index: number): void` |              |\n| className        | CSS-class of element                                                 |                                  `string`                                  |              |\n\n## CSS API\n\n| Name                             | Description                |\n| :------------------------------- | :------------------------- |\n| `--g-tabs-border-width`          | Tabs border width          |\n| `--g-tabs-item-height`           | Tabs item height           |\n| `--g-tabs-item-border-width`     | Tabs item border width     |\n| `--g-tabs-item-gap`              | Distance between tabs      |\n| `--g-tabs-vertical-item-height`  | Tabs vertical item height  |\n| `--g-tabs-vertical-item-padding` | Tabs vertical item padding |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_icons":"Icons","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"}}},"initialLocale":"en","ns":["common","component"],"userConfig":{"i18n":{"locales":["en"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"default":{"i18n":{"locales":["en"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false}}}}},"__N_SSG":true}