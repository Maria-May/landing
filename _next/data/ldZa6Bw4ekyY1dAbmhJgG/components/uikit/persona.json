{"pageProps":{"libId":"uikit","componentId":"persona","readmeContent":"# Persona\n\nThe `Persona` component can be used to display users or user-related information.\n\n### Image\n\nThis component can be used with a custom image. It works only with `type: \"person\"`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Persona type=\"person\" text=\"Charles Darwin\" />\n<Persona type=\"email\" text=\"email@example.com\" />\n<Persona type=\"empty\" text=\"Alan Turing\" />\n`}\n>\n    <UIKit.Persona type=\"person\" text=\"Charles Darwin\" image=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Charles_Darwin_by_Julia_Margaret_Cameron%2C_c._1868.jpg/193px-Charles_Darwin_by_Julia_Margaret_Cameron%2C_c._1868.jpg\"/>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Persona type=\"person\" text=\"Charles Darwin\" image=\"<url>\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Type\n\nUsed to manage avatar appearance. Use \"person\" for a personalized entity and \"email\" for an email adresses. Use \"other\" for cases when you do not need any avatar.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Persona type=\"person\" text=\"Charles Darwin\" />\n<Persona type=\"email\" text=\"email@example.com\" />\n<Persona type=\"empty\" text=\"Alan Turing\" />\n`}\n>\n    <UIKit.Persona type=\"person\" text=\"Charles Darwin\" />\n    <UIKit.Persona type=\"email\" text=\"email@example.com\" />\n    <UIKit.Persona type=\"empty\" text=\"Alan Turing\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Persona type=\"person\" text=\"Charles Darwin (person)\" />\n<Persona type=\"email\" text=\"email@example.com (email)\" />\n<Persona type=\"empty\" text=\"Alan Turing (other)\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Size\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Persona type=\"person\" size=\"s\" text=\"Charles Darwin (s)\" />\n<Persona type=\"person\" size=\"n\" text=\"Charles Darwin (n)\" />\n`}\n>\n    <UIKit.Persona type=\"person\" size=\"s\" text=\"Charles Darwin (s)\" />\n    <UIKit.Persona type=\"person\" size=\"n\" text=\"Charles Darwin (n)\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Persona type=\"person\" size=\"s\" text=\"Charles Darwin\" />\n<Persona type=\"person\" size=\"n\" text=\"Charles Darwin\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\nS: Basic size, used in most components.\nN: Used when regular labels are too small.\n\n### Interactivity\n\nThis component is also interactive. It can be clickable or closable.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Persona text=\"Charles Darwin\" onClick={() => alert('onClick triggered')} />\n<Persona text=\"Charles Darwin\" onClose={() => alert('onClose triggered')} />\n`}\n>\n    <UIKit.Persona text=\"Charles Darwin\" onClick={() => alert('onClick triggered')} />\n    <UIKit.Persona text=\"Charles Darwin\" onClose={() => alert('onClose triggered')} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Persona text=\"Charles Darwin\" onClick={() => alert('onClick triggered')} />\n<Persona text=\"Charles Darwin\" onClose={() => alert('onClose triggered')} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Properties\n\n| Name      | Description                                                 |              Type              |  Default   |\n| :-------- | :---------------------------------------------------------- | :----------------------------: | :--------: |\n| text      | Visible text                                                |            `string`            |            |\n| image     | Image source                                                |            `string`            |            |\n| hasBorder | Display border                                              |           `boolean`            |   `true`   |\n| type      | Avatar appearance                                           | `\"person\"` `\"email\"` `\"empty\"` | `\"person\"` |\n| size      | Text size                                                   |          `\"s\"` `\"n\"`           |   `\"s\"`    |\n| onClose   | Handles click on button with cross `(text: string) => void` |           `Function`           |            |\n| onClick   | Handles click on component itself `(text: string) => void`  |           `Function`           |            |\n| className | Custom CSS class for root element                           |            `string`            |            |\n"},"__N_SSG":true}