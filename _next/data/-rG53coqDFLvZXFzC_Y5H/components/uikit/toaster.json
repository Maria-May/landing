{"pageProps":{"libId":"uikit","componentId":"toaster","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Toaster\n\n<!--/GITHUB_BLOCK-->\n\nComponent for adjustable notifications.\n\n## Usage with context\n\n```jsx\nimport React from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport {ToasterComponent, ToasterProvider} from '@gravity-ui/uikit';\n\nconst root = ReactDOMClient.createRoot(document.getElementById('root'));\nroot.render(\n  <ToasterProvider>\n    <App />\n    <ToasterComponent className=\"optional additional classes\" />\n  </ToasterProvider>,\n);\n```\n\nThen in your app components you can show toasts with `useToaster` hook.\n\n```jsx\nimport {useToaster} from '@gravity-ui/uikit';\nimport {useEffect} from 'react';\n\nexport function FoobarComponent() {\n  const {add} = useToaster();\n\n  useEffect(() => {\n    add({\n      title: 'Toaster is here',\n    });\n  }, []);\n\n  return null;\n}\n```\n\nHook returns methods `add`, `update`, `remove` and `removeAll` (see below).\n\n## Usage as HOC\n\nFor class components you can use `withToaster` HOC. This will inject `toaster`\nprop to component.\n\n```jsx\nimport {Component} from 'react';\nimport {withToaster} from '@gravity-ui/uikit';\n\nclass FoobarComponent extends Component {\n  render() {\n    this.props.toaster.add({});\n  }\n}\n\nconst FoobarWithToaster = withToaster()(FoobarComponent);\n```\n\n## Usage as singleton\n\nToaster has singleton, so when initialized in different parts of the application, the same instance will be returned.\nOn initialization it is possible to pass className, that will be assigned to dom-element which is wrapping all toasts.\n\n### React < 18\n\n```js\nimport {Toaster} from '@gravity-ui/uikit';\nconst toaster = new Toaster();\n```\n\nor\n\n```js\nimport {toaster} from '@gravity-ui/uikit/toaster-singleton';\n```\n\n### React 18\n\n```js\nimport ReactDOMClient from 'react-dom/client';\nimport {Toaster} from '@gravity-ui/uikit';\nToaster.injectReactDOMClient(ReactDOMClient);\nconst toaster = new Toaster();\n```\n\nor\n\n```js\nimport {toaster} from '@gravity-ui/uikit/toaster-singleton-react-18';\n```\n\n## Constructor arguments\n\n| Parameter | Type      | Default     | Description                                         |\n| :-------- | :-------- | :---------- | :-------------------------------------------------- |\n| className | `string`  | `undefined` | Custom class name to add to the component container |\n| mobile    | `boolean` | `false`     | Configuration that manages mobile/desktop views     |\n\n## Methods\n\n| Method name                   | Params             | Description                                                                                                                             |\n| :---------------------------- | :----------------- | :-------------------------------------------------------------------------------------------------------------------------------------- |\n| add(toastOptions)             | `Object`           | Create new notification                                                                                                                 |\n| remove(name)                  | `string`           | Delete existing notification manually                                                                                                   |\n| update(name, overrideOptions) | `string`, `Object` | Change already rendered notification content. In `overrideOptions` following fields are optional: `title`, `type`, `content`, `actions` |\n| has(name)                     | `string`           | Checks if there is a toast with the given name in the list of displayed toasts                                                          |\n\n## More about `add`\n\nAccepts argument `toastOptions` with ongoing notification details:\n\n| Parameter  | Type                                    | Required | Default     | Description                                                                                                                                                         |\n| :--------- | :-------------------------------------- | :------- | :---------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| name       | `string`                                | yes      |             | Notification unique name. Notifications with same names collapse into one                                                                                           |\n| title      | `string`                                |          |             | Notification title                                                                                                                                                  |\n| className  | `string`                                |          |             | CSS-class                                                                                                                                                           |\n| autoHiding | `number` or `false`                     |          | 5000        | Time (in milliseconds) after which the notification will hide. Use `false` to disable toast hiding after timeout.                                                   |\n| content    | `node`                                  |          | `undefined` | Notification content. [Anything that can be rendered: numbers, strings, elements or an array](https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes)  |\n| type       | `string`                                |          | `undefined` | Notification type. Possible values: `error`, `success`. If `type` is set, icon (success/error) will be added into notification title. _By default there is no icon_ |\n| isClosable | `boolean`                               |          | `true`      | Configuration that manages visibility of cross icon, which allows to close notification                                                                             |\n| actions    | `ToastAction[]`                         |          | `undefined` | Array of [actions](./types.ts#L9) which displays after `content`                                                                                                    |\n| renderIcon | `(toastProps: ToastProps) => ReactNode` |          | `undefined` | Use for toast icon customization. By default type-based behavior is used                                                                                            |\n\nEvery `action` is an object with following parameters:\n\n| Parameter        | Type                                      | Required | Default    | Description                                                 |\n| :--------------- | :---------------------------------------- | :------- | :--------- | :---------------------------------------------------------- |\n| label            | `string`                                  | yes      |            | Action text description                                     |\n| onClick          | `() => void`                              | yes      |            | On action click handler                                     |\n| view             | [`ButtonView`](../Button/README.md#props) |          | `outlined` | Appearance of the action, same to `view` of the `<Button/>` |\n| removeAfterClick | `boolean`                                 |          | `true`     | If notification should be closed after click on action      |\n"},"__N_SSG":true}