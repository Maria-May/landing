{"pageProps":{"libId":"uikit","componentId":"pin-input","readmeContent":"<!--GITHUB_BLOCK-->\n\n# PinInput\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {PinInput} from '@gravity-ui/uikit';\n```\n\n`PinInput` is a group of inputs to enter sequence of numeric or alphanumeric values quickly. The most common use case of the component\nis entering OTP or confirmation codes received via SMS, email or authenticator app.\n\nEach input collects one character at time. When value is accepted, focus is moved to the next input, until all fields are filled.\n\n## Type\n\nBy default, inputs accept only numeric values. To allow alphanumeric values set the `type` prop to `\"alphanumeric\"`:\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput type=\"alphanumeric\" />\n`}\n>\n    <UIKit.PinInput type=\"alphanumeric\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput type=\"alphanumeric\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Size\n\nThe component comes in four sizes: `s`, `m`, `l`, `xl`. The default is `m`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput size=\"s\" />\n<PinInput size=\"m\" />\n<PinInput size=\"l\" />\n<PinInput size=\"xl\" />\n`}\n>\n    <UIKit.PinInput size=\"s\" />\n    <UIKit.PinInput size=\"m\" />\n    <UIKit.PinInput size=\"l\" />\n    <UIKit.PinInput size=\"xl\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput size=\"s\" />\n<PinInput size=\"m\" />\n<PinInput size=\"l\" />\n<PinInput size=\"xl\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## State\n\nIf you don't want the user to interact with the component set the `disabled` prop:\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput disabled />\n`}\n>\n    <UIKit.PinInput disabled />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput disabled />\n```\n\n<!--/GITHUB_BLOCK-->\n\nTo show an invalid state of the component use the `validationState` prop with the `\"invalid\"` value. Optionally set an error text\nwith the `errorMessage` prop:\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput validationState=\"invalid\" errorMessage=\"Incorrect PIN\" />\n`}\n>\n    <UIKit.PinInput validationState=\"invalid\" errorMessage=\"Incorrect PIN\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput validationState=\"invalid\" errorMessage=\"Incorrect PIN\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Placeholder\n\nBy default, there is no placeholder on inputs. You can set it with the `placeholder` prop:\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput placeholder=\"ðŸ˜Ž\" />\n`}\n>\n    <UIKit.PinInput placeholder=\"ðŸ˜Ž\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput placeholder=\"ðŸ˜Ž\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Mask\n\nIf you need to mask entered values use the `mask` prop. It's similar to `<input type=\"password\"/>` behaviour.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput mask />\n`}\n>\n    <UIKit.PinInput mask />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput mask />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## OTP\n\nIf you want the browser to suggest \"one time codes\" from the outer context (e.g. SMS) set the `otp` prop.\n\n## API\n\n- `focus(): void` - Set focus to the current active input.\n\n## CSS API\n\n| Name                       | Description                                            |\n| :------------------------- | :----------------------------------------------------- |\n| `--g-pin-input-item-width` | Set width of each input, unless `responsive` is `true` |\n| `--g-pin-input-item-gap`   | Set gap between inputs                                 |\n\n## Properties\n\n| Name             | Description                                                                                                                                          |                     Type                     |   Default   |\n| :--------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------: | :---------: |\n| apiRef           | Ref to the [API](#api)                                                                                                                               |              `React.RefObject`               |             |\n| aria-describedby | HTML `aria-describedby` attribute                                                                                                                    |                   `string`                   |             |\n| aria-label       | HTML `aria-label` attribute                                                                                                                          |                   `string`                   |             |\n| aria-labelledby  | HTML `aria-labelledby` attribute                                                                                                                     |                   `string`                   |             |\n| autoFocus        | Whether or not to focus the first input on initial render                                                                                            |                  `boolean`                   |             |\n| className        | HTML `class` attribute                                                                                                                               |                   `string`                   |             |\n| defaultValue     | Initial value for uncontrolled component                                                                                                             |                  `string[]`                  |             |\n| disabled         | Toggles `disabled` state                                                                                                                             |                  `boolean`                   |             |\n| errorMessage     | Error text placed under the bottom-start corner that shares space with the note container. Only visible when `validationState` is set to `\"invalid\"` |              `React.ReactNode`               |             |\n| id               | HTML `id` attribute prefix for inputs. Resulting id will also contain `\"-${index}\"` part                                                             |                   `string`                   |             |\n| length           | Number of input fields                                                                                                                               |                   `number`                   |     `4`     |\n| mask             | When set to `true` mask input values like password field                                                                                             |                  `boolean`                   |             |\n| name             | HTML `name` attribute for input                                                                                                                      |                   `string`                   |             |\n| form             | The associate form of the underlying input element.                                                                                                  |                   `string`                   |             |\n| note             | An element placed under the bottom-end corner that shares space with the error container                                                             |              `React.ReactNode`               |             |\n| onUpdate         | Callback fired when any of inputs change                                                                                                             |         `(value: string[]) => void`          |             |\n| onUpdateComplete | Callback fired when any of inputs change and all of them are filled                                                                                  |         `(value: string[]) => void`          |             |\n| otp              | When set to `true` adds `autocomplete=\"one-time-code\"` to inputs                                                                                     |                  `boolean`                   |             |\n| placeholder      | Placeholder for inputs                                                                                                                               |                   `string`                   |             |\n| qa               | HTML `data-qa` attribute, for test purposes                                                                                                          |                   `string`                   |             |\n| responsive       | Parent's width distributed evenly between inputs                                                                                                     |                  `boolean`                   |             |\n| size             | Size of input fields                                                                                                                                 |           `\"s\"` `\"m\"` `\"l\"` `\"xl\"`           |    `\"m\"`    |\n| style            | HTML `style` attribute                                                                                                                               |            `React.CSSProperties`             |             |\n| type             | What type of input value is allowed                                                                                                                  |         `\"numeric\"` `\"alphanumeric\"`         | `\"numeric\"` |\n| validationState  | Validation state. Affect component's appearance                                                                                                      |                 `\"invalid\"`                  |             |\n| value            | Current value for controlled component                                                                                                               |                  `string[]`                  |             |\n| `onFocus`        | Callback fired when the component receives focus                                                                                                     | `(event: React.FocusEvent<Element>) => void` |             |\n| `onBlur`         | Callback fired when the component loses focus                                                                                                        | `(event: React.FocusEvent<Element>) => void` |             |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_icons":"Icons","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"}}},"initialLocale":"en","ns":["common","component"],"userConfig":{"i18n":{"locales":["en"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"default":{"i18n":{"locales":["en"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false}}}}},"__N_SSG":true}