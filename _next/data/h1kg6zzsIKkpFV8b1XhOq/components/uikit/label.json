{"pageProps":{"libId":"uikit","componentId":"label","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Label\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Label} from '@gravity-ui/uikit';\n```\n\n`Label` can be used for displaying certain marking information. `Label` with the close or copy button may be useful for various simple actions.\n\n`Label` is most suitable for displaying one-line text information with different color codes indicating its importance.\n\n## Appearance\n\n`Label` can be displayed in multiple styles.\n\n### Theme\n\nApply different themes for various statuses with the `theme` property. You can use the following values: `normal`, `info`, `success`, `warning`, `danger`, `utility`, `unknown`, and `clear`.\nThe default theme is `normal`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Label theme=\"normal\">Normal</Label>\n<Label theme=\"info\">Info</Label>\n<Label theme=\"success\">Success</Label>\n<Label theme=\"warning\">Warning</Label>\n<Label theme=\"danger\">Danger</Label>\n<Label theme=\"utility\">Utility</Label>\n<Label theme=\"unknown\">Unknown</Label>\n<Label theme=\"clear\">Clear</Label>\n`}\n>\n    <UIKit.Label theme=\"normal\">Normal</UIKit.Label>\n    <UIKit.Label theme=\"info\">Info</UIKit.Label>\n    <UIKit.Label theme=\"success\">Success</UIKit.Label>\n    <UIKit.Label theme=\"warning\">Warning</UIKit.Label>\n    <UIKit.Label theme=\"danger\">Danger</UIKit.Label>\n    <UIKit.Label theme=\"utility\">Utility</UIKit.Label>\n    <UIKit.Label theme=\"unknown\">Unknown</UIKit.Label>\n    <UIKit.Label theme=\"clear\">Clear</UIKit.Label>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Label theme=\"normal\">Normal</Label>\n<Label theme=\"info\">Info</Label>\n<Label theme=\"success\">Success</Label>\n<Label theme=\"warning\">Warning</Label>\n<Label theme=\"danger\">Danger</Label>\n<Label theme=\"utility\">Utility</Label>\n<Label theme=\"unknown\">Unknown</Label>\n<Label theme=\"clear\">Clear</Label>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Type\n\nAdds various options to the `Label` using the `type` property.\n\n`copy`: Adds a copy button; when clicked, it copies the value of the `copyText` property.\n\n`close`: Adds a close button for managing label lists.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Label type=\"default\" onClick={() => alert('On click label')} size=\"s\">Clickable</Label>\n<Label type=\"close\" onClose={() => alert('On click close')} size=\"s\">Closable</Label>\n<Label type=\"copy\" copyText=\"Copy\" onCopy={() => alert('On copy')} size=\"s\">Copy</Label>\n`}\n>\n    <UIKit.Label type=\"default\" onClick={() => alert('On click label')} size=\"s\">Clickable</UIKit.Label>\n    <UIKit.Label type=\"close\" onClose={() => alert('On click close')} size=\"s\">Closable</UIKit.Label>\n    <UIKit.Label type=\"copy\" copyText=\"Copy\" onCopy={() => alert('On copy')} size=\"s\">Copy</UIKit.Label>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Label type=\"default\" onClick={() => alert('On click label')} size=\"s\">Clickable</Label>\n<Label type=\"close\" onClose={() => alert('On click close')} size=\"s\">Closable</Label>\n<Label type=\"copy\" copyText=\"Copy\" onCopy={() => alert('On copy')} size=\"s\">Copy</Label>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Icon\n\nYou can add an icon with the `icon` property. To do so, use the [`Icon`](../Icon) component, a special wrapper for SVGs.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Label icon={<Icon size={16} data={GearIcon} />}>Icon</Label>\n<Label type=\"close\" icon={<Icon size={16} data={GearIcon} />}>Icon and close</Label>\n<Label type=\"copy\" icon={<Icon size={16} data={GearIcon} />}>Icon and copy</Label>\n`}\n>\n    <UIKit.Label icon={\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" class=\"yc-icon\" fill=\"currentColor\" stroke=\"none\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clip-rule=\"evenodd\"></path></svg></svg>\n        )} size={16} />\n    }>\n        <span>Icon</span>\n    </UIKit.Label>\n    <UIKit.Label type=\"close\" icon={\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" class=\"yc-icon\" fill=\"currentColor\" stroke=\"none\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clip-rule=\"evenodd\"></path></svg></svg>\n        )} size={16} />\n    }>\n        <span>Icon and close</span>\n    </UIKit.Label>\n    <UIKit.Label type=\"copy\" icon={\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" class=\"yc-icon\" fill=\"currentColor\" stroke=\"none\" aria-hidden=\"true\"><svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clip-rule=\"evenodd\"></path></svg></svg>\n        )} size={16} />\n    }>\n        <span>Icon and copy</span>\n    </UIKit.Label>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Label icon={<Icon size={16} data={GearIcon} />}>Icon</Label>\n<Label type=\"close\" icon={<Icon size={16} data={GearIcon} />}>Icon and close</Label>\n<Label type=\"copy\" icon={<Icon size={16} data={GearIcon} />}>Icon and copy</Label>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Value\n\n`Label` can be used for displaying key-value information. Pass key to the `children` and value to the `value` property.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Label theme=\"normal\" value=\"Value\">Key</Label>\n<Label theme=\"info\" value=\"Value\">Key</Label>\n<Label theme=\"success\" value=\"Value\">Key</Label>\n<Label theme=\"warning\" value=\"Value\">Key</Label>\n<Label theme=\"danger\" value=\"Value\">Key</Label>\n<Label theme=\"utility\" value=\"Value\">Key</Label>\n<Label theme=\"unknown\" value=\"Value\">Key</Label>\n<Label theme=\"clear\" value=\"Value\">Key</Label>\n`}\n>\n    <UIKit.Label theme=\"normal\" value=\"Value\">Key</UIKit.Label>\n    <UIKit.Label theme=\"info\" value=\"Value\">Key</UIKit.Label>\n    <UIKit.Label theme=\"success\" value=\"Value\">Key</UIKit.Label>\n    <UIKit.Label theme=\"warning\" value=\"Value\">Key</UIKit.Label>\n    <UIKit.Label theme=\"danger\" value=\"Value\">Key</UIKit.Label>\n    <UIKit.Label theme=\"utility\" value=\"Value\">Key</UIKit.Label>\n    <UIKit.Label theme=\"unknown\" value=\"Value\">Key</UIKit.Label>\n    <UIKit.Label theme=\"clear\" value=\"Value\">Key</UIKit.Label>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Label theme=\"normal\" value=\"Value\">Key</Label>\n<Label theme=\"info\" value=\"Value\">Key</Label>\n<Label theme=\"success\" value=\"Value\">Key</Label>\n<Label theme=\"warning\" value=\"Value\">Key</Label>\n<Label theme=\"danger\" value=\"Value\">Key</Label>\n<Label theme=\"utility\" value=\"Value\">Key</Label>\n<Label theme=\"unknown\" value=\"Value\">Key</Label>\n<Label theme=\"clear\" value=\"Value\">Key</Label>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## State\n\nA `label` can have different states:\n\n- `disabled`: No interactions allowed.\n- `interactive`: Makes the label hoverable.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Label>Default</Label>\n<Label disabled>Disabled</Label>\n<Label interactive>Interactive</Label>\n`}\n>\n    <UIKit.Label>Default</UIKit.Label>\n    <UIKit.Label disabled>Disabled</UIKit.Label>\n    <UIKit.Label interactive>Interactive</UIKit.Label>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Label>Default</Label>\n<Label disabled>Disabled</Label>\n<Label interactive>Interactive</Label>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Size\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Label size=\"xs\">XS size</Label>\n<Label size=\"s\">S size</Label>\n<Label size=\"m\">M size</Label>\n`}\n>\n    <UIKit.Label size=\"xs\">XS size</UIKit.Label>\n    <UIKit.Label size=\"s\">S size</UIKit.Label>\n    <UIKit.Label size=\"m\">M size</UIKit.Label>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Label size=\"xs\">XS size</Label>\n<Label size=\"s\">S size</Label>\n<Label size=\"m\">M size</Label>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Properties\n\n| Name             | Description                                   |              Type              |   Default   |\n| :--------------- | :-------------------------------------------- | :----------------------------: | :---------: |\n| children         | Content                                       |       `React.ReactNode`        |             |\n| className        | HTML `class` attribute                        |            `string`            |             |\n| closeButtonLabel | `aria-label` of the close button              |            `string`            |             |\n| copyButtonLabel  | `aria-label` of the copy button               |            `string`            |             |\n| copyText         | Text to copy                                  |            `string`            |             |\n| disabled         | Disabled state                                |           `boolean`            |             |\n| icon             | Label icon (on the left)                      |       `React.ReactNode`        |             |\n| interactive      | Enable hover effect                           |           `boolean`            |             |\n| onClick          | `click` event handler                         |           `Function`           |             |\n| onClose          | Close button `click` event handler            |           `Function`           |             |\n| onCopy           | `copy` event handler                          |           `Function`           |             |\n| size             | Label size                                    |       `\"xs\"` `\"s\"` `\"m\"`       |    `\"s\"`    |\n| theme            | Label theme                                   |            `string`            | `\"normal\"`  |\n| type             | Label type                                    | `\"default\"` `\"copy\"` `\"close\"` | `\"default\"` |\n| value            | Label value (displayed as \"children : value\") |            `string`            |             |\n| qa               | HTML `data-qa` attribute, used in tests       |            `string`            |             |\n"},"__N_SSG":true}