{"pageProps":{"libId":"uikit","componentId":"button","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Button\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Button} from '@gravity-ui/uikit';\n```\n\nButtons act as a trigger for certain actions. While this is their main purpose, in very rare cases,\nthey can be used as links to navigate to another pages.\n\n## Appearance\n\nThere are four `Button` view types: basic, outlined, flat and contrast.\nThe `Button`'s appearance is determined by the `view` property.\n\n### Basic\n\n`action` - the most prominent button, used for the primary action on a screen which requires the most attention.\nWe recommend using only one such button per page.\n\n`normal` - default type of the `Button`, designed for secondary actions or to maintain the importance of an\naction without drawing too much attention to it.\n\n`raised` - placed above the content as a \"floating\" element, usually with a fixed location.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button view=\"action\" size=\"l\">Action</Button>\n<Button view=\"normal\" size=\"l\">Normal</Button>\n<Button view=\"raised\" size=\"l\">Raised</Button>\n`}>\n    <UIKit.Button view=\"action\" size=\"l\">Action</UIKit.Button>\n    <UIKit.Button view=\"normal\" size=\"l\">Normal</UIKit.Button>\n    <UIKit.Button view=\"raised\" size=\"l\">Raised</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button view=\"action\" size=\"l\">Action</Button>\n<Button view=\"normal\" size=\"l\">Normal</Button>\n<Button view=\"raised\" size=\"l\">Raised</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Outlined\n\n`outlined` - used for secondary actions that require less attention on a page. Can be used with or without a main button (only with an accented one).\n\n`outlined-action` - usually used as a link to another page or external resource.\n\nThere are also semantic variants of this type, which can be used when additional semantics are needed: `outlined-info`, `outlined-success`, `outlined-warning`, `outlined-danger`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button view=\"outlined\" size=\"l\">Outlined</Button>\n<Button view=\"outlined-action\" size=\"l\">Outlined Action</Button>\n<Button view=\"outlined-info\" size=\"l\">Outlined Info</Button>\n<Button view=\"outlined-success\" size=\"l\">Outlined Success</Button>\n<Button view=\"outlined-warning\" size=\"l\">Outlined Warning</Button>\n<Button view=\"outlined-danger\" size=\"l\">Outlined Danger</Button>\n<Button view=\"outlined-utility\" size=\"l\">Outlined Utility</Button>\n`}>\n    <UIKit.Button view=\"outlined\" size=\"l\">Outlined</UIKit.Button>\n    <UIKit.Button view=\"outlined-action\" size=\"l\">Outlined Action</UIKit.Button>\n    <UIKit.Button view=\"outlined-info\" size=\"l\">Outlined Info</UIKit.Button>\n    <UIKit.Button view=\"outlined-success\" size=\"l\">Outlined Success</UIKit.Button>\n    <UIKit.Button view=\"outlined-warning\" size=\"l\">Outlined Warning</UIKit.Button>\n    <UIKit.Button view=\"outlined-danger\" size=\"l\">Outlined Danger</UIKit.Button>\n    <UIKit.Button view=\"outlined-utility\" size=\"l\">Outlined Utility</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button view=\"outlined\" size=\"l\">Outlined</Button>\n<Button view=\"outlined-action\" size=\"l\">Outlined Action</Button>\n<Button view=\"outlined-info\" size=\"l\">Outlined Info</Button>\n<Button view=\"outlined-success\" size=\"l\">Outlined Success</Button>\n<Button view=\"outlined-warning\" size=\"l\">Outlined Warning</Button>\n<Button view=\"outlined-danger\" size=\"l\">Outlined Danger</Button>\n<Button view=\"outlined-utility\" size=\"l\">Outlined Utility</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Flat\n\n`flat` - used for auxiliary actions that require the least attention on a page. It is often used in a list of buttons or action icons (with no text) in an editor.\n\n`flat-secondary` - less accented than the `flat` button. It's often used as the secondary button in dialog boxes and modal windows.\n\n`flat-action` - usually used as link to another page or external resource.\n\nThere are also semantic variants of this view, which can be used in places where additional semantic needed: `flat-info`, `flat-success`, `flat-warning`, `flat-danger`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button view=\"flat\" size=\"l\">Flat</Button>\n<Button view=\"flat-secondary\" size=\"l\">Flat Secondary</Button>\n<Button view=\"flat-action\" size=\"l\">Flat Action</Button>\n<Button view=\"flat-info\" size=\"l\">Flat Info</Button>\n<Button view=\"flat-success\" size=\"l\">Flat Success</Button>\n<Button view=\"flat-warning\" size=\"l\">Flat Warning</Button>\n<Button view=\"flat-danger\" size=\"l\">Flat Danger</Button>\n<Button view=\"flat-utility\" size=\"l\">Flat Utility</Button>\n`}\n>\n    <UIKit.Button view=\"flat\" size=\"l\">Flat</UIKit.Button>\n    <UIKit.Button view=\"flat-action\" size=\"l\">Flat Action</UIKit.Button>\n    <UIKit.Button view=\"flat-info\" size=\"l\">Flat Info</UIKit.Button>\n    <UIKit.Button view=\"flat-success\" size=\"l\">Flat Success</UIKit.Button>\n    <UIKit.Button view=\"flat-warning\" size=\"l\">Flat Warning</UIKit.Button>\n    <UIKit.Button view=\"flat-danger\" size=\"l\">Flat Danger</UIKit.Button>\n    <UIKit.Button view=\"flat-utility\" size=\"l\">Flat Utility</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button view=\"flat\" size=\"l\">Flat</Button>\n<Button view=\"flat-secondary\" size=\"l\">Flat Secondary</Button>\n<Button view=\"flat-action\" size=\"l\">Flat Action</Button>\n<Button view=\"flat-info\" size=\"l\">Flat Info</Button>\n<Button view=\"flat-success\" size=\"l\">Flat Success</Button>\n<Button view=\"flat-warning\" size=\"l\">Flat Warning</Button>\n<Button view=\"flat-danger\" size=\"l\">Flat Danger</Button>\n<Button view=\"flat-utility\" size=\"l\">Flat Utility</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Contrast\n\n`normal-contrast`, `outline-contrast` and `flat-contrast` buttons highlight actions against complex background, e.g., in a banner or against an inverse background.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    background='rgb(68, 38, 204)'\n    code={`\n<Button view=\"normal-contrast\" size=\"l\">Normal Contrast</Button>\n<Button view=\"outlined-contrast\" size=\"l\">Outlined Contrast</Button>\n<Button view=\"flat-contrast\" size=\"l\">Flat Contrast</Button>\n`}\n>\n    <UIKit.Button view=\"normal-contrast\" size=\"l\">Normal Contrast</UIKit.Button>\n    <UIKit.Button view=\"outlined-contrast\" size=\"l\">Outlined Contrast</UIKit.Button>\n    <UIKit.Button view=\"flat-contrast\" size=\"l\">Flat Contrast</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button view=\"normal-contrast\" size=\"l\">Normal Contrast</Button>\n<Button view=\"outlined-contrast\" size=\"l\">Outlined Contrast</Button>\n<Button view=\"flat-contrast\" size=\"l\">Flat Contrast</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Icons\n\nTo add an icon to the `Button`, you should use the [`Icon`](../Icon) component, a special wrapper for SVGs.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button view=\"outlined\" size=\"l\">\n    <Icon data={Gear} size={18} />\n    Start\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    End\n    <Icon data={Gear} size={18} />\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    <Icon data={Gear} size={18} />\n    Both\n    <Icon data={Gear} size={18} />\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    <Icon data={Gear} size={18} />\n</Button>\n`}\n>\n    <UIKit.Button view=\"outlined\" size=\"l\">\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n        )} size={18} />\n        Start\n    </UIKit.Button>\n    <UIKit.Button view=\"outlined\" size=\"l\">\n        End\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n        )} size={18} />\n    </UIKit.Button>\n    <UIKit.Button view=\"outlined\" size=\"l\">\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n        )} size={18} />\n        Both\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n        )} size={18} />\n    </UIKit.Button>\n    <div style={{display: 'flex', gap: '16px', alignItems: 'center'}}>\n        <span>No text:</span>\n        <UIKit.Button view=\"outlined\" size=\"l\">\n            <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n        )} size={18} />\n        </UIKit.Button>\n    </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button view=\"outlined\" size=\"l\">\n    <Icon data={Gear} size={18} />\n    Start\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    End\n    <Icon data={Gear} size={18} />\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    <Icon data={Gear} size={18} />\n    Both\n    <Icon data={Gear} size={18} />\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    No text:\n    <Icon data={Gear} size={18} />\n</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## States\n\nThe `Button` can be in different states.\n\n`disabled` - when the button is unavailable for some reason.\n\n`loading` - when some asynchronous processes are happening in the background, `selected` - when the user can switch between \"Enable\" and \"Disable\".\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button size=\"l\" disabled>Disabled</Button>\n<Button size=\"l\" loading>Loading</Button>\n<Button size=\"l\" selected>Selected</Button>\n`}\n>\n    <UIKit.Button size=\"l\" disabled>Disabled</UIKit.Button>\n    <UIKit.Button size=\"l\" loading>Loading</UIKit.Button>\n    <UIKit.Button size=\"l\" selected>Selected</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button size=\"l\" disabled>Disabled</Button>\n<Button size=\"l\" loading>Loading</Button>\n<Button size=\"l\" selected>Selected</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Size\n\nTo control the size of the `Button` use the `size` property. Default size is `m`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button size=\"xs\">XS Size</Button>\n<Button size=\"s\">S Size</Button>\n<Button size=\"m\">M Size</Button>\n<Button size=\"l\">L Size</Button>\n<Button size=\"xl\">XL Size</Button>\n`}\n>\n    <UIKit.Button size=\"xs\">XS Size</UIKit.Button>\n    <UIKit.Button size=\"s\">S Size</UIKit.Button>\n    <UIKit.Button size=\"m\">M Size</UIKit.Button>\n    <UIKit.Button size=\"l\">L Size</UIKit.Button>\n    <UIKit.Button size=\"xl\">XL Size</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button size=\"xs\">XS Size</Button>\n<Button size=\"s\">S Size</Button>\n<Button size=\"m\">M Size</Button>\n<Button size=\"l\">L Size</Button>\n<Button size=\"xl\">XL Size</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Width\n\nThe `width` property controls how the `Button` behaves inside the container.\n\n`auto` - limits the maximum width of the component, hides overflowing content with an ellipsis.\n\n`max` - matches the width to the width of the parent container, also hides overflowing content with an ellipsis.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button>Default</Button>\n<Button width=\"auto\">Auto</Button>\n<Button width=\"max\">Max</Button>\n`}\n>\n    <div style={{width: 100, border: '2px dashed gray'}}>\n        <h4 style={{textAlign: 'center'}}>Default</h4>\n        <p>\n            <UIKit.Button>Text</UIKit.Button>\n        </p>\n        <p>\n            <UIKit.Button>Very Long Text</UIKit.Button>\n        </p>\n    </div>\n    <div style={{width: 100, border: '2px dashed gray'}}>\n        <h4 style={{textAlign: 'center'}}>Auto</h4>\n        <p>\n            <UIKit.Button width=\"auto\">Text</UIKit.Button>\n        </p>\n        <p>\n            <UIKit.Button width=\"auto\">Very Long Text</UIKit.Button>\n        </p>\n    </div>\n    <div style={{width: 100, border: '2px dashed gray'}}>\n        <h4 style={{textAlign: 'center'}}>Max</h4>\n        <p>\n            <UIKit.Button width=\"max\">Text</UIKit.Button>\n        </p>\n        <p>\n            <UIKit.Button width=\"max\">Very Long Text</UIKit.Button>\n        </p>\n    </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## Pin\n\nThe `pin` property allows you to control the shape of the \"start\" and \"end\" edges and is usually used for combining multiple buttons in a single unit.\nThe value of the `pin` property consists of \"start\" and \"end\" style names divided by a dash, e.g. `\"round-brick\"`.\nThe edge styles are: `round` (default), `circle`, `brick` and `clear`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<div>\n    <Button view=\"action\" size=\"l\" pin=\"round-clear\">Create</Button>\n    <Button view=\"action\" size=\"l\" pin=\"brick-round\">...</Button>\n</div>\n<div>\n    <Button view=\"normal\" size=\"l\" pin=\"circle-clear\">Start</Button>\n    <Button view=\"normal\" size=\"l\" pin=\"brick-brick\" selected>Center</Button>\n    <Button view=\"normal\" size=\"l\" pin=\"clear-circle\">End</Button>\n</div>\n<div>\n    <Button view=\"outlined\" pin=\"brick-clear\">1</Button>\n    <Button view=\"outlined\" pin=\"clear-clear\">2</Button>\n    <Button view=\"outlined\" pin=\"clear-clear\">3</Button>\n    <Button view=\"outlined\" pin=\"clear-brick\">4</Button>\n</div>\n`}\n>\n    <div>\n        <UIKit.Button view=\"action\" size=\"l\" pin=\"round-clear\">Create</UIKit.Button>\n        <UIKit.Button view=\"action\" size=\"l\" pin=\"brick-round\">...</UIKit.Button>\n    </div>\n    <div>\n        <UIKit.Button view=\"normal\" size=\"l\" pin=\"circle-clear\">Start</UIKit.Button>\n        <UIKit.Button view=\"normal\" size=\"l\" pin=\"brick-brick\" selected>Center</UIKit.Button>\n        <UIKit.Button view=\"normal\" size=\"l\" pin=\"clear-circle\">End</UIKit.Button>\n    </div>\n    <div>\n        <UIKit.Button view=\"outlined\" pin=\"brick-clear\">1</UIKit.Button>\n        <UIKit.Button view=\"outlined\" pin=\"clear-clear\">2</UIKit.Button>\n        <UIKit.Button view=\"outlined\" pin=\"clear-clear\">3</UIKit.Button>\n        <UIKit.Button view=\"outlined\" pin=\"clear-brick\">4</UIKit.Button>\n    </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<div>\n    <Button view=\"action\" size=\"l\" pin=\"round-brick\">Create</Button>\n    <Button view=\"action\" size=\"l\" pin=\"brick-round\">...</Button>\n</div>\n<div>\n    <Button view=\"normal\" size=\"l\" pin=\"circle-clear\">Start</Button>\n    <Button view=\"normal\" size=\"l\" pin=\"brick-brick\" selected>Center</Button>\n    <Button view=\"normal\" size=\"l\" pin=\"clear-circle\">End</Button>\n</div>\n<div>\n    <Button view=\"outlined\" pin=\"brick-clear\">1</Button>\n    <Button view=\"outlined\" pin=\"clear-clear\">2</Button>\n    <Button view=\"outlined\" pin=\"clear-clear\">3</Button>\n    <Button view=\"outlined\" pin=\"clear-brick\">4</Button>\n</div>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Properties\n\n| Name         | Description                                               |              Type               |     Default     |\n| :----------- | :-------------------------------------------------------- | :-----------------------------: | :-------------: |\n| children     | Button content. You can mix text with `<Icon/>` component |           `ReactNode`           |                 |\n| className    | HTML `class` attribute                                    |            `string`             |                 |\n| component    | Overrides the root component                              |       `ElementType<any>`        |   `\"button\"`    |\n| disabled     | Toggles `disabled` state                                  |             `false`             |     `false`     |\n| extraProps   | Any additional props                                      |            `Record`             |                 |\n| href         | HTML `href` attribute                                     |            `string`             |                 |\n| id           | HTML `id` attribute                                       |            `string`             |                 |\n| loading      | Toggles `loading` state                                   |             `false`             |     `false`     |\n| onBlur       | `blur` event handler                                      |           `Function`            |                 |\n| onClick      | `click` event handler                                     |           `Function`            |                 |\n| onFocus      | `focus` event handler                                     |           `Function`            |                 |\n| onMouseEnter | `mouseenter` event handler                                |           `Function`            |                 |\n| onMouseLeave | `mouseleave` event handler                                |           `Function`            |                 |\n| pin          | Sets button edges style                                   |            `string`             | `\"round-round\"` |\n| qa           | HTML `data-qa` attribute, used in tests                   |            `string`             |                 |\n| rel          | HTML `rel` attribute                                      |            `string`             |                 |\n| selected     | Toggles `selected` state                                  |                                 |                 |\n| size         | Sets button size                                          |            `string`             |      `\"m\"`      |\n| style        | HTML `style` attribute                                    |      `React.CSSProperties`      |                 |\n| tabIndex     | HTML `tabIndex` attribute                                 |            `number`             |                 |\n| target       | HTML `target` attribute                                   |            `string`             |                 |\n| title        | HTML `title` attribute                                    |            `string`             |                 |\n| type         | HTML `type` attribute                                     | `\"button\"` `\"submit\"` `\"reset\"` |   `\"button\"`    |\n| view         | Sets button appearance                                    |            `string`             |   `\"normal\"`    |\n| width        | `\"auto\"` `\"max\"`                                          |        `\"auto\"` `\"max\"`         |                 |\n\n## CSS API\n\n| Name                                | Description               |\n| :---------------------------------- | :------------------------ |\n| `--g-button-text-color`             | Text color                |\n| `--g-button-text-color-hover`       | Text color on hover       |\n| `--g-button-background-color`       | Background color          |\n| `--g-button-background-color-hover` | Background color on hover |\n| `--g-button-border-width`           | Border width              |\n| `--g-button-border-color`           | Border color              |\n| `--g-button-border-style`           | Border style              |\n| `--g-button-focus-outline-width`    | Focus outline color       |\n| `--g-button-focus-outline-color`    | Focus outline color       |\n| `--g-button-focus-outline-style`    | Focus outline style       |\n| `--g-button-focus-outline-offset`   | Focus outline offset      |\n| `--g-button-height`                 | Height, line-height       |\n| `--g-button-padding`                | Side paddings             |\n| `--g-button-border-radius`          | Border radius             |\n| `--g-button-font-size`              | Text font size            |\n| `--g-button-icon-size`              | Icon size                 |\n| `--g-button-icon-offset`            | Icon offset               |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_icons":"Icons","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"}}},"initialLocale":"en","ns":["common","component"],"userConfig":{"i18n":{"locales":["en"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"default":{"i18n":{"locales":["en"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false}}}}},"__N_SSG":true}