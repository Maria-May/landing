"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7532],{7532:function(e,n,t){t.d(n,{N:function(){return o}});let o=[{id:"branding",title:"General",description:"Design guides description",articles:[{id:"resources",title:"Resources",description:"",content:'<div className="row">\n   <div className="col-12 col-md-6">\n      ## Component Library in Figma\n\n      The component library is available in Figma Community. To use it we recommend publishing in\n\n      [Open in Figma](https://www.figma.com/community/file/1271150067798118027/gravity-ui-design-system)\n   </div>\n   <div className="col-12 col-md-6">\n      ![img-gravitylib.png](/static/images/design/Resources/img-gravitylib.png)\n   </div>\n</div>\n\n<div style={{borderBottom: "1px solid rgba(255, 255, 255, 0.2)", marginBottom: "16px"}}></div>\n\n<div className="row">\n   <div className="col-12 col-md-6">\n      ## Icon Library in Figma\n\n      The default icon set for Gravity UI. We recommend publishing it together with the component library, and adding to the desired files together as well.\n\n      [Open in Figma](https://www.figma.com/community/file/1271409368825184262/gravity-ui-icons)\n   </div>\n   <div className="col-12 col-md-6">\n      ![img-iconslib.png](/static/images/design/Resources/img-iconslib.png)\n   </div>\n</div>\n\n<div style={{borderBottom: "1px solid rgba(255, 255, 255, 0.2)", marginBottom: "16px"}}></div>\n\n<div className="row">\n   <div className="col-12 col-md-6">\n      ## Illustration Library in Figma\n\n      A set of default illustrations to use with Gravity UI Design System. You can use them on their own or within the `PlaceholderContainer` component which was added to the [Component library](https://gravity-ui.com/libraries/components).\n\n      [Open in Figma](https://www.figma.com/community/file/1363128208054017326/gravity-ui-illustrations)\n   </div>\n   <div className="col-12 col-md-6">\n      ![img-illustrationslib.png](/static/images/design/Resources/img-illustrationslib.png)\n   </div>\n</div>\n\n<div style={{borderBottom: "1px solid rgba(255, 255, 255, 0.2)"}}></div>\n\n## How to use\n\n1. Open the link\n2. Click `Open in Figma`\n3. If you’ve been invited to several organisations, select where you want to have the library copied to\n4. Move the library from your drafts to your project adjust the styles you want to and publish it\n5. Add the library to a desired file using the `Team Library` interface or make it a default library for all the Team Files in the Admin Pane. The first time you publish it, Figma might think for a while assembling all the styles and components.\n'},{id:"basics",title:"Basics",description:"",content:"Gravity-UI is a collection of libraries and components for building functional user interfaces. The design system supports multiple themes: **light**, **dark**, and **high-contrast** variations of each. The visual style of the components in every theme can be easily customized.\n\n**Color**\n\nThe design system consists of four themes based on a two-layer color model. The theming engine supports versatile color customization and brand identities with different sets of requirements.\n\n**Typography**\n\nThe typography system consists of typesetting styles, display fonts, and code (monospace font). You can use the default fonts or create your own.\n\n**Control corner radius**\n\nThe corner radius is a small yet important part of the visual style. To make it easier to work with it, we developed a set of radius variables. These variables are used by different controls. To adjust the radius of the controls, simply change the values of the variables.\n\n**Creating and using a theme**\n\nWhatever the brand and visual language, it all comes down to a set of constants that you should be able to easily edit and use in both your code and Figma's library."},{id:"color",title:"Color",description:"",content:"## Two-layer color system\n\nThere are two types of color schemes used in the library: private and semantic. These two color schemes, or palettes, vary in structure and purpose. The private palette assigns RGBA values to all shades and tints of colors across all themes, while the semantic palette uses private colors as values and applies them to specific UI elements.\n\n![Two-layer color system](/static/images/design/Color/ColorSystem.png)\n\n### **Private colors**\n\nAre the base color layers in a design system. They are not designed to be used directly within components. Instead, they serve as values for semantic variables that are already used in components. The values of private variables are RGBA/RGB colors.\n\nThis palette includes all the tones of each color for every theme, both with and without an alpha channel, with the prefix **Solid**.\n\n![Private colors](/static/images/design/Color/PrivateColors.png)\n\n### **Colors with an alpha channel**\n\nAlpha colors are only available for indices of 500 and below. They are mixed with the background color, allowing for better readability and contrast. It is suggested that you use them:\n\n1. for light colors (from 50 to 300)\n2. in typography-related projects where text can be displayed on top of backgrounds of any color because using an alpha channel prevents contrast loss.\n\n### **Solid colors**\n\nUse solid colors when two objects may overlap and you want to prevent color blending in the place of an overlap. Solid colors are selected based on the primary background for the theme. Since solid colors can be displayed on top of underlays of any color and  their use should be carefully considered.\n\nShades should be regenerated whenever the primary or secondary background color is changed to maintain visual consistency between solid colors and alpha channel colors.\n\n### How to create tones\n\nTone is created from the middle of the scale, which in our case is a color with an index of 550. It is the primary color that generates less saturated and more saturated tones. The exceptions are black and white, which are at the extreme end of the scale and allow for the creation of more tones and values with an alpha channel.\n\nColors with an index from 50 to 500 are created by reducing the Opacity of the base color (550). Colors with an alpha channel can only be found in this range, as opposed to solid colors, which can have values across the entire scale.\n\nColors with an index of 600 to 1000 are created by blending with a background color that contrasts with the primary color for the selected theme. For example, the primary background color of a light theme is white, and the contrasting color is the background of a dark theme. So this contrasting background will be mixed into the color to create darker tones.\n\nIn a dark theme, the primary background is dark, and the contrasting background is the background of a light theme, which is white. So white will be mixed into the color to create high-index tones.\n\nA script allows you to quickly generate a color palette for development handoff.\n\n### **Semantic colors**\n\nVariables in this color group are categorized into **groups**, which are subsequently used within components based on their **meanings**.  Their values are configured for each theme using private variables. Some semantic variables can sometimes be used as values for others, but this must be done carefully to avoid recursion.\n\n![Semantic colors](/static/images/design/Color/SemanticColors.png)\n\n### **Categories based on types**\n\nIn Figma, variables are organized into groups for easier navigation, as listed below.  While, in the code, the structure is more straightforward. Branding isn't placed in a separate category, and there's only one Base variable group. Figma and code are equivalent in terms of variable names, structure, and meaning, except when the name is optimized for readability or understanding.\n\n1. **Branding**\n\n   A collection of brand-specific variables from all categories. These are basic colors that allow you to quickly apply a style and see the result. This group is exclusive to Figma. It is not included in the code, and the colors are categorized into groups of their own.\n\n2. **Text**\n\n   A group of variables for the color of text and icons. Since text and icons are often displayed together, it makes sense to maintain their visual consistency.\n\n3. **Base**\n\n   A color group for underlays, fills, and backgrounds\n\n4. **Base Semantic**\n\n   Underlay colors with Info, Positive, Warning, Danger, and Misc colorings. There are values for both Normal and Hover states. May work for some types of infographics, but not all. This group is exclusive to Figma. In code, it is part of the **Base** group.\n\n5. **Base Float**\n\n   Underlay colors of elements that float above the page's primary background. This group is exclusive to Figma. In code, it is part of the **Base** group.\n\n6. **Line**\n\n   Colors of strokes, lines, dividers, frames, and any other thin elements.\n\n7. **Effects**\n\n   Colors used to darken text, apply shadows, etc.\n\n8. **Misc**\n\n   A group of technical colors used for scrollbars, chart axes, and tooltip backgrounds in charts.\n\n\nMore information on each variable can be found in the Figma color style description or in the storybook.\n\n### Categories based on meaning\n\nVariables in each group may have their own meanings, which are determined by a group's application principles. For texts, for example, it makes sense to use categories like **main** and **additional**. However, they can’t be applied to any other types of content.\n\nThe following are examples of meanings shared by different categories:\n\n- success\n- dangerous\n- warning\n- neutral\n- etc.\n\n## Variables and colorstyles\n\nYou can work with color values using Figma's Local Variables interface. To go there, open the file with the library, make sure nothing is selected on the page (you can do this by clicking on the canvas's empty background), and select Local Variables in the right panel.\n\n![Variables](/static/images/design/Color/Variables.png)\n\nWhile variables are still not in beta, the design system continues to use color styles to directly define the color of an object. Note that the value within the color style is represented by the corresponding variable. Which means:\n\n1. To change the color of a colorstyle, you need to change the color of the corresponding variable.\n2. Colorstyles inherit the properties of variables, particularly support for color themes. As a result, an object with a colorstyle applied can change the theme using only the functionality of Figma.\n\n   ![Styles](/static/images/design/Color/Styles.png)\n\n\n## Themes\n\nGravity-UI supports four themes: light, dark, and contrasting versions of each. The current industry standard requires at least two: light and dark. Given how diverse users' preferences can be, sometimes it is difficult to pick the best one.\n\nThemes with increased contrast were created to address the lack of contrast in regular themes, which can be caused by either equipment features such as monitor calibration, set brightness, matrix type, and color rendering (especially on TV) or room lighting. Currently, these themes do not offer a solution for addressing Accessibility concerns."},{id:"typography",title:"Typography",description:"",content:"Typography is based on the use of two fonts and a set of styles that include font, weight, font size, and leading.\n\nTwo fonts are used by default: Inter for standard typesetting and headings, and Menlo as a monospace font. Inter is available in [Google Fonts](https://fonts.google.com/specimen/Inter?query=inter), and Menlo is pre-installed on some operating systems. You can change these fonts according to your brand's guidelines.\n\n# Font parameters\n\n### Size and leading\n\nThe leading determines the space between the baselines, and the font size establishes the size of the font. These two parameters determine the readability of the text.\n\n### Weight\n\nThe weight is specified for text styles (the default for the Body and Caption groups is 400) and display styles (the default for Subheader, Header, and Display is 600). By default, display styles have more weight. However, there may be exceptions.\n\n# Style groups\n\n### **Body**\n\nUsed for all types of text. Inter is set as the default (400).\n\n![Body](/static/images/design/Typography/Body.png)\n\nBody 1 Short has reduced leading and is used within narrow content blocks (up to 300–400px in width).\n\n### **Caption**\n\nThe smallest fonts of all available fonts. Used as styles for captions, footnotes, and any additional information. Inter is set as the default (400).\n\n![Caption](/static/images/design/Typography/Caption.png)\n\n### **Header**\n\nMost commonly used as headings in interfaces where information density is crucial. Inter is set as the default (600).\n\n![Header](/static/images/design/Typography/Header.png)\n\n### **Subheader**\n\nCan be used as subheadings or as accents when paired with appropriate body styles. Inter is set as the default (600).\n\n![Subheader](/static/images/design/Typography/Subheader.png)\n\n### **Display**\n\nSuitable for situations where display is more important than information density, such as in communication design. Inter is set as the default (600).\n\n![Display](/static/images/design/Typography/Display.png)\n\n### **Code**\n\nUsed to display code in separate blocks. Menlo is set as the default.\n\n![Code](/static/images/design/Typography/Code.png)\n\n### **Code Inline**\n\nUsed to output code that is embedded in plain text. Reduced line spacing is used for optical compensation and alignment with plain text. When changing fonts, make sure that the inline code is displayed correctly. Menlo is set as the default.\n\n![Code Inline](/static/images/design/Typography/CodeInline.png)"},{id:"corner-radius",title:"Corner Radius",description:"",content:'The corner radius of controls can be overridden. To do this, use the following variables:\n\n- -g-border-radius-xs: 3px;\n- -g-border-radius-s: 5px;\n- -g-border-radius-m: 6px;\n- -g-border-radius-l: 8px;\n- -g-border-radius-xl: 10px;\n- -g-border-radius-2xl: 16px;\n\n![Corner radius](/static/images/design/CornerRadius/1.png)\n\nYou can override the values in **Variables**\n\nVariables are used in controls of corresponding sizes. If you change the variable\'s value, the corner radius of all controls of the same size will change accordingly. The controls affected by this variable are listed on the Branding page of the Figma library. Since different controls have different size ranges, sets of controls may not match. Labels, for example, do not come in sizes larger than L, so variables beginning with --g-border-radius-l are not used in this component and have no effect on its appearance.\n\n![Corner radius](/static/images/design/CornerRadius/2.png)\n\nThe corner radius of the nested element for the check-button is determined by the tokens and is calculated using the formula "token value - 3" (where 3 is the distance between the internal and external elements). In the current version, you have to perform the calculations manually and enter the results into the following tokens:\n\n![Corner radius](/static/images/design/CornerRadius/3.png)\n\n![Corner radius](/static/images/design/CornerRadius/4.png)'},{id:"branding",title:"Branding",description:"",content:"# Quick theme creation\n\nQuick branding allows you to switch between themes quickly and see an immediate result that you can use or optimize further. Simply choose a few colors, and all of the controls will be adjusted accordingly. Repeat for all supported themes, and you are all set.\n\n### Before you start\n\n1. We recommend downloading the latest version of the Figma library\n2. Values are configured in the variable management interface. Open the Color Styles collection and select the Branding group\n\n   ![Branding](/static/images/design/Branding/Branding.png)\n\n3. The results can be conveniently viewed on Figma's Branding page. It contains components that use brand variables, which will give you an idea of how everything will look in the end.\n4. Remember to use colorstyles in components.\n5. The value of each colorstyle is represented by the corresponding variable\n\n### 1. Base brand colors\n\n**--g-color-base-background**\n\nPage background color. The most common color for a light theme is white, but you can use any color you like. Dark themes have more options, from neutral gray shades to warm or cool colors.\n\n![background](/static/images/design/Branding/background.png)\n\n**--g-color-base-brand**\n\nPrimary brand color. Background for the main button, checkbox, radio, switch, and special tooltip theme\n\n![Primary brand color](/static/images/design/Branding/PrimaryBrandColor.png)\n\n**--g-color-base-brand-hover**\n\nHover color for the primary brand color. We are using a darker shade, but a lighter or completely different color is also acceptable.\n\n![Hover](/static/images/design/Branding/Hover.png)\n\n**--g-color-base-brand-selection**\n\nUnderlays for elements with “selected” semantics\n\n![Selection](/static/images/design/Branding/Selection.png)\n\n**--g-color-base-brand-selection-hover**\n\nHover color of the selected elements. It is used less frequently in typical tasks and more frequently when preparing all states for a new component or prototyping.\n\n![Selection Hover](/static/images/design/Branding/SelectionHover.png)\n\n**--g-color-line-brand**\n\nBrand-colored lines Selected state in cards, tabs; spinner color\n\n![Lines](/static/images/design/Branding/Lines.png)\n\n**--g-color-text-brand**\n\nBrand-colored texts when used without underlays\n\n![Text](/static/images/design/Branding/Text.png)\n\n**--g-color-text-brand-heavy**\n\nBrand-colored texts on top of underlays. Compensate for the loss of contrast caused by the use of an underlay.\n\n![Text Heavy](/static/images/design/Branding/Heavy.png)\n\n**--g-color-text-brand-contrast**\n\nOnce you decide on a color for branding the main controls, choose a contrasting color for them. Contrast must be maintained across all themes.\n\nIf the brightness of the brand color does not change significantly when switching themes, you can try colors with constant brightness: --g-color-text-light-primary and --g-color-text-dark-primary. If the brightness of the brand color changes, try --g-color-text-primary\nor --g-color-text-inverted-primary.\n\n![Contrast](/static/images/design/Branding/Contrast.png)\n\n**--g-color-text-link**\n\nLink color\n\n![Link color](/static/images/design/Branding/LinkColor.png)\n\n**--g-color-text-link-hover**\n\nHover link color\n\n![Hover link color](/static/images/design/Branding/HoverLinkColor.png)\n\n**--g-color-text-link-visited**\n\nVisited link color\n\n![Visited link color](/static/images/design/Branding/VisitedLinkColor.png)\n\n**--g-color-text-link-visited-hover**\n\nVisited link hover color\n\n![Visited link hover color](/static/images/design/Branding/VisitedLinkHoverColor.png)\n\n### 2. Typography\n\nAll text styles are listed in the right column of the library, under the section Local Styles. This section is displayed if there are no objects selected. In this case, the attributes of the selected object, not the library, are displayed.\n\n![Typography](/static/images/design/Branding/Typography1.png)\n\nTo access the text style editing interface, click the settings icon to the right of the style name.\n\n![Typography](/static/images/design/Branding/Typography2.png)\n\nStyles are divided into three groups.\n\n![Typography](/static/images/design/Branding/Typography3.png)\n\n1. **Header.** Contains headings, subheadings, and display styles.\n2. **Text.** Styles for typed text and captions\n3. **Misc.** Styles for displaying code and code within regular typed text (inline-styles).\n\nFor the Header and Text groups, you may use one font with varying weights. Headings usually have higher font weights than typesetting fonts.\n\nFor the Misc group, you can set a monospace font. Make sure that the inline styles are displayed correctly when embedded in typed text and that the typesetting's baseline is not shifted. Otherwise, it's recommended to choose a suitable value for the Line Height parameter.\n\nFor styles, minor changes to the Font Size and Line Height parameters are allowed. In different typefaces, the height and width of characters can significantly vary, and in some cases, this variation needs to be compensated for. Remember that certain text styles are used within specific component sizes, and significant changes to style parameters may result in components displaying incorrectly. Therefore, when making any changes to Font Size and Line Height, it is important to check how components are displayed in different sizes.\n\n### 3. Corner radius\n\nThis parameter can be configured in the variable management interface. The values can be found in the Border Radius collection. This attribute is set by two groups of variables: primary and technical.\n\n![Corner radius](/static/images/design/Branding/CornerRadius.png)\n\n### Primary set\n\nThis set of variables match the code variables These values are applied to controls of corresponding sizes.\n\n- --g-border-radius-s: 3px\n- --g-border-radius-s: 5px\n- --g-border-radius-l: 6px\n- --g-border-radius-l: 8px\n- --g-border-radius-xl: 10px\n- --g-border-radius-2xl: 16px\n\n### Technical set\n\nUsed only in Figma to calculate the corner radius of the internal element in the Check Button component. These are variables labeled as Inner, and their values should be linked to the values of the primary set of variables. To calculate the value of an Inner variable, take the value of the main variable of the same size and subtract 3.\n\nFor example, if --g-border-radius-m is set to 6px, then the Inner M radius is calculated as 6 - 3 = 3px.\n\n### 4. Technical colors\n\nThis group contains the colors for scrollbars supported by the design system. To ensure proper display of scrollbars in dark themes across various browsers, it's recommended to configure them accordingly.\n\nVariables in this group:\n\n- --g-color-scroll-track\n- --g-color-scroll-handle\n- --g-color-scroll-handle-hover\n- --g-color-scroll-corner\n\n# Advanced theme settings\n\n### Private color tuning\n\nIf you want to adjust a specific color shade so that it aligns with the brand colors, use a private palette. Private colors are configured in the variable management interface under the Private Colors collection.\n\n![Private color tuning](/static/images/design/Branding/PrivateColorTuning.png)\n\nBasic chromatic colors:\n\n- Blue\n- Green\n- Red\n- Yellow\n- Orange\n- Cold gray\n- Purple\n\nAny of them (or all at once) may need to be adjusted to match the brand colors. To prepare a palette ready for handover to development, use a [script](https://preview.gravity-ui.com/uikit/?path=/docs/branding-palette-generator--docs). You'll need to transfer the script's output into Figma.\n\nIf the page background (or the background in the contrasting theme) has been modified, generate new solid shades for black and white.\n\nWhen changes are made to the private palette, the semantic colors are automatically updated as well.\n\n### Semantic color tuning\n\nIf the values of private variables don't align with the brand's visual language, you can adjust the values of semantic colors. They are configured in the variables interface in the Color Styles collection.\n\n![Semantic color tuning](/static/images/design/Branding/SemanticColorTuning.png)\n\nPlease note the following:\n\n1. Make sure to use private colors that match the corresponding theme.\n2. Replacing private colors with an alpha channel with solid colors (and vice versa) may cause problems.\n3. Changes to semantic variables will be applied automatically to colorstyles and components that use them.\n\n# Synchronization with development\n\nAt the moment, theme synchronization between the Figma library and code is done manually. Prior to development handoff, CSS variables must be prepared according to the [instructions](https://preview.gravity-ui.com/uikit/?path=/docs/branding-overview--docs)."},{id:"grid-and-container",title:"Grid and container",description:"",content:'![Grid](/static/images/design/GridAndContainer/grid.png)\n\nThe space module allows us to define strict rules for size and spacing calculations, while the grid helps structure the content into visually organized blocks. We use a 12-, 8-, and 4-column grid that makes it possible to divide the selected area into halves, thirds, and fourths.\n\n# Grid structure\n\n![Grid structure](/static/images/design/GridAndContainer/structure.png)\n\nColumns ➊ define the boundaries for horizontal alignment; spaces ➋ provide padding between grid columns; outer margins ➌ ensure padding and center alignment of the container ➍. The grid column width is determined by a percentage value, and the default column spacing is set to 20px.\n\n# Container\n\n![Container](/static/images/design/GridAndContainer/container.png)\n\nA container is a fundamental component of system design that contains and organizes content within a given viewport. We use two types of containers: Fixed with a fixed width (which means that its fixed max-width can change at each breakpoint) and Fluid with a variable width, which occupies 100% of the available space (except for sizes S, XS, and 2XS).\n\n# Breakpoints\n\nMedia query breakpoints, or breakpoints, are predefined viewport widths that allow you to manage various grid settings.\n\n![Breakpoints](/static/images/design/GridAndContainer/breakpoints.png)\n\n# Exclusion zones\n\n![Exclusion zones](/static/images/design/GridAndContainer/zones.png)\n\nIn UI design layouts, users expect certain elements to be positioned in specific areas. We refer to these areas as "exclusion zones," and we do not include them in our grid system. When flexible or navigation panels expand, the content and grid are either compressed to fit within the browser or extended beyond it. Overlay panels cover the content without affecting the main container.'},{id:"module",title:"Module and spacing system",description:"",content:"The module is the fundamental unit of measurement in the design system. The spatial module is the foundation for building the grid and determining component and spacing sizes. The module allows you to standardize the principles of specifying spacings and sizes within the design system as well as achieve visual consistency between Figma layouts and the final production code.\n\n# Module\n\nTo shape and measure space in our design system, we use the 4x4 px module. All container and component spacings are calculated using this space size. In rare instances, we use a 2x2px micro-module.\n\n![Group 216614948.png](/static/images/design/Module/Group_216614948.png)\n\n# Spacing system\n\nWe use a limited set of tokenized spacings that help create clean and consistent layouts. When creating interfaces and components in a design system, use pre-configured Figma tokens.\n\n![Frame 216614957.png](/static/images/design/Module/Frame_216614957.png)\n\n# Types of spacing\n\n![Frame 2087326456.png](/static/images/design/Module/Frame_2087326456.png)\n\n**Internal and external spacing**\n\nInternal and external symmetrical or asymmetrical spacing from all four container borders to the content.\n\n![Frame 2087326462.png](/static/images/design/Module/Frame_2087326462.png)\n\n**Horizontal and vertical stack**\n\nIn horizontal and vertical stacks, the spacing between elements within the container defines their vertical and horizontal relationships."}]},{id:"guides",title:"Components",description:"Design guides description",articles:[{id:"action-tooltip",title:"Action Tooltip",description:"",content:"A tooltip that appears when the user hovers over a button. Typically, includes an explanation or additional information about the action that will be performed upon clicking the button. Often used for buttons with only one icon, providing users with a clear understanding of the action associated with it.\n\n## Structure\n\n![2.png](/static/images/design/ActionTooltip/Structure.png)\n\n1. **Title** is the most important and required element of the tooltip; it describes the primary function of the button. We recommend formulating the title text so that it fits into a single line.\n2. **Description** — an optional tooltip element that provides additional information about the title.\n3. **Hotkeys / Shortcut** - an optional tooltip element, a key combination that, when pressed, initiates the described action in the interface Used to teach users quick actions to speed up their interaction with the service.\n\n## Options\n\n![Group 2087325956.png](/static/images/design/ActionTooltip/Variants.png)\n\n1. The **title alone** is the most commonly used option; the tooltip briefly describes only the action itself. We recommend formulating the text so that it contains no more than 5 words\n2. **Title and shortcut** - If an action has a key combination assigned to it, it is recommended to display it for user guidance.\n3. **Title and description** - If the action is complex and the title cannot be formulated concisely and clearly, it is recommended to include a description with additional information.\n4. **Title, description, and shortcut** - the maximum set for a component, used when all elements are required for the user to make a decision in the interface.\n\n## Sizes\n\nWhen a single title or title+shortcut is used, the tooltip width adjusts to the text. For descriptions, the width is set at 300px.\n\nPadding in all options: 12px left and right, 8px top and bottom.\n\nIn the option with shortcuts, the space between the title and label is set at 8px.\n\nIn the option with a description (regardless of whether there are hotkeys or not), the distance between the title and description is 2px.\n\n![158.png](/static/images/design/ActionTooltip/Sizes.png)\n\n## Position\n\nThe tooltip's main position in relation to the button is bottom and center, with a 4px distance between elements.\n\n![13.png](/static/images/design/ActionTooltip/LocationUnder.png)\n\nIf buttons are positioned at the left or right edge of the page, the tooltip is aligned with the corresponding button edge.\n\n![14.png](/static/images/design/ActionTooltip/LocationUnderLeft&right.png)\n\nIf buttons are at the bottom of the screen, the tooltip is displayed at the top in the position that corresponds to the location of the button: left edge, center, or right edge.\n\n![15.png](/static/images/design/ActionTooltip/LocationAboveLeft&center&right.png)\n\n## Timing\n\nDepending on its purpose, you can adjust the delay for the tooltip to appear and disappear upon hovering over it. In most cases, the tooltip appears instantly or with a minimal delay of up to 250 ms and disappears when the user moves the cursor away from the button.\n\nIf you think that the majority of users will understand the function of the button without a hint, the tooltip can be shown only to those who are having difficulty, and the appearance delay can be increased to avoid annoying users with unnecessary elements.\n\n## Use cases\n\n![Example](/static/images/design/ActionTooltip/Example1.png)\n\n![Example](/static/images/design/ActionTooltip/Example2.png)\n"},{id:"alert",title:"Alert",description:"",content:"Alert is used to get the user's attention and provide them with useful information without disrupting their workflow.\n\n![Example](/static/images/design/Alert/Example.png)\n\n## When to use a DLQ\n\nIt is designed to update the user on the current state of the system, report errors and warnings, and provide the user with instructions, links, or commands to correct those errors as soon as possible.\n\n## Types\n\nDepending on the situation, the user may see one of the following types of Alert (Type):\n\n- Danger is used to notify the user that the underlying scenario cannot be continued at the moment (e.g., no access to an object) or that further user actions may result in the permanent loss of data or resources.\n- Warning is used to inform the user that further operations may be difficult or that a fallback scenario may be unavailable.\n- Success is used to notify the user of a positive status or any other positive change in the system. For instance, about the successful completion of a lengthy operation.\n- Info is used to display recommendations on how to organize work with the system (which should be explicitly displayed) or to announce additional system features.\n- Normal is mostly used to highlight text, such as short help, example code, calculation results, and so on.\n\n![Types](/static/images/design/Alert/Types.png)\n\nDon't replace types simply to draw the user's attention, such as by displaying reference information in an Alert with a Warning or Error type.\n\nIn addition to instructions, Alert offers a number of commands to help the user find a solution and take action.\n\n![Warning](/static/images/design/Alert/Warning.png)\n\n## When not to use\n\nDue to their disruptive nature (especially if the wrong Alert type is selected), alerts should be used sparingly.\n\n- We don't recommend using Alert to display an error, warning, or help message associated with a separate form or dialog field. In this situation, it is better to use the Error state on the field component or to display a plain-text message or text with an icon next to the field.\n- We don't recommend placing multiple Alerts, such as Danger and Warning, on the same page (form, dialog), as this makes it difficult to determine the priority of messages.\n- Do not use Alert for anything other than its intended purpose, such as visually highlighting any blocks on the page: headers, form fields, and so on.\n- Do not use Alert to confirm that operations have been completed. For these kinds of tasks, use Dialog.\n- Do not use an Alert to display the status of a user-initiated operation. For this purpose, use Toaster.\n\n## Content\n\nRequired Alert elements include a description and an icon. In addition to these, Alert may include a title (Title), a close button (Close), and up to three additional buttons with actions (Actions).\n\n### Icon\n\nBy default, an Alert displays an icon that corresponds to its type. You can, however, choose your own icon for the component while leaving the background color unchanged. For Alert type Normal, the icon is optional and is not displayed by default.\n\n![Icon](/static/images/design/Alert/Icon.png)\n\n### Text\n\nThe title and description text should be as short as possible and start with a capital letter. If you want to give the user more information, it is best to use links or the \"Help\", \"Documentation\", and \"Learn more\" buttons to direct the user to a separate help page or website.\n\nThe title should clearly convey the message's thesis. However, it shouldn't repeat the description. If choosing the thesis and turning it into a headline is difficult, use the description without a heading.\n\nThe title should not end with a period.\n\n### Buttons\n\nDepending on the design requirements and constraints, additional buttons may be displayed to the right of the text (Horizontal Layout) or below it (Vertical Layout).\n\n![Button](/static/images/design/Alert/Button1.png)\n\nIf the buttons and their labels leave enough space for the description and header without creating unnecessary line breaks, then place the buttons on the right. If the width of the Alert is less than 500-600px, opt for the vertical view.\n\nAdditional buttons use the Normal style by default. However, depending on the semantics of the message, they can be Action, Contrast-normal, and various types of Outline (Outline-info, Outline-danger, and so on). We recommend keeping the styles of all three buttons consistent. Use only one Action button, and make sure to consider the context of the page, such as whether there are already other Action buttons present.\n\n![Button](/static/images/design/Alert/Button2.png)\n\nAlert has a cross button that should be displayed in case the user wants to hide the message due to its irrelevancy.\n\n![Button](/static/images/design/Alert/Button3.png)\n\n## Options\n\nThe width of the Alert is not limited: it can take up the entire available space on the page (form or dialog) or have a fixed width determined by the width of the main content.\n\nIf the Alert is designed to be displayed close to the page's borders (form, dialog) and take up the entire width (e.g., a message about updating the browser or the conditions for storing Cookies on the site), rounding the corners of the Alert container is not necessary.\n\n![Options](/static/images/design/Alert/Options1.png)\n\nIf the design does not require the Alert to actively attract the user's attention, you can use Outlined View, which has the same type of semantics as Filled View.\n\n![Options](/static/images/design/Alert/Options2.png)"},{id:"breadcrumbs",title:"Breadcrumbs",description:"",content:'**Breadcrumbs** are a chain of links that represent the path in the service\'s structure from the root page to the current page, allowing users to navigate to any page in between. They help the user determine which part of the service they are in and quickly navigate one or more levels back.\n\n![Example](/static/images/design/Breadcrumbs/Example.png)\n\n## When to use a DLQ\n\n- Use the Breadcrumbs component for nested pages.\n- There is no need to use breadcrumbs on the home page.\n- Breadcrumbs are usually placed in the action bar at the very top of the page.\n\n## Structure\n\n![Structure](/static/images/design/Breadcrumbs/Structure.png)\n\n1 - **Current page.**\n\n2 - **Previous page.** Best to display first, if the width of the container allows for that.\n\n3 - **Root page of the service.**\n\n4 - **Divider.** "/" is used by default, but ">" is also acceptable.\n\n5 - **Overflow icon.** Appears when page titles do not fit within the width of the container. Pages that take up more space than is available are accessed via a drop-down menu, which is revealed by clicking the ellipsis.\n\n## Sizes\n\nThe basic font size in breadcrumbs is body-1. The icon size is 16x16 px.\n\n![Sizes](/static/images/design/Breadcrumbs/Sizes.png)\n\n## States\n\n![States](/static/images/design/Breadcrumbs/States.png)\n\n**Default** - default state.\n\n**Hover** - hovering over the page title.\n\n**Disable** - non-clickable. Can be used for the current page or for pages that are not linked.\n\n**Loading** - the component can display the content of the element by passing a function through the renderItemContent parameter. For example, display Skeleton if the data for the crumbs element has not been loaded yet.\n\n## Modifications\n\n![Modifications](/static/images/design/Breadcrumbs/Modifications1.png)\n\nBreadcrumbs may contain the following additional elements:\n\n1. **Action icon -** such as add to favorites, copy page title, or context menu.\n2. **[Label](/design/guides/label) —** a status or another attribute associated with the page.\n3. **Select —** clicking on the element enables you to choose between various options.\n4. **Additional text**—ID, quantity counter, and other page attributes\n\nA house icon can be used instead of the word "Main" to indicate a return to the home page.\n\n![Modifications](/static/images/design/Breadcrumbs/Modifications1.png)\n\n## Customization\n\nYou can change colors, dividers, and hover styles. Remember to keep a brighter highlight on the current page and enough contrast between elements.\n\n![Customization](/static/images/design/Breadcrumbs/Customization.png)'},{id:"button",title:"Button",description:"",content:'A button is an interactive element of the user interface that, when clicked, performs an action, e.g.: form submission, saving changes, or moving to the next step. If you need to navigate to another page or website, use a link.\n\n## Appearance\n\nThere are five types of buttons: accent, primary, semantic, raised, and contrasting.\n\n### **Accent**\n\n![Accent](/static/images/design/Button/Button1.png)\n\nAccent buttons highlight key actions and attract user attention to important operations. They have three main styles: Action, Outlined action, and Flat action\n\nChoose between these types of accent buttons depending on the degree of emphasis you want to place on actions in the interface. Use Action for the highest priority, Outlined Action for medium priority, and Flat Action – for lower priority or secondary operations.\n\nUse accent buttons in the interface sparingly and, if possible, limit their number to one per page (except for dialog boxes). This way, you can emphasize importance and highlight the main action for the user, but mitigate the risk of overwhelming the interface with too many accent elements.\n\n### Primary\n\n![Primary](/static/images/design/Button/Button2.png)\n\nPrimary buttons perform main and commonly used actions in the interface. These buttons have several styles: Normal, Outlined, Flat, and Flat Secondary. Choose between these styles depending on the degree of emphasis you want to place on certain actions in the interface. For example, a Normal button is suitable for standard actions, an Outlined button for actions with medium priority, and Flat and Flat Secondary buttons are intended for less important or secondary operations.\n\n### Semantic\n\nSemantic buttons convey a specific context or action, carrying a meaning for the user. Use them to help users easily understand what operations are performed and what their meaning is.\n\nSemantic buttons have four main styles: Info, Success, Warning, Danger.\n\n### Info\n\n![Info](/static/images/design/Button/Button3.png)\n\nUse them for actions related to getting additional information, hints, or context. Information buttons can also serve as hyperlinks when you need to highlight an option to navigate to another resource. E.g.: More Information, Documentation, Help.\n\n**Success**\n\n![Success](/static/images/design/Button/Button4.png)\n\nUse them to highlight successfully completed actions.\n\n**Warning**\n\n![Warning](/static/images/design/Button/Button5.png)\n\nUse them to highlight actions requiring user attention due to potential risks or warnings. These buttons help users understand possible consequences of their action and encourage caution.\n\n**Danger**\n\n![Danger](/static/images/design/Button/Button6.png)\n\nUse them to highlight actions that could be destructive or have negative consequences. We recommend using this button cautiously and only where it is really necessary to highlight potential negative aspects (e.g., deletion, stop, disconnection).\n\n**Raised**\n\n![Raised](/static/images/design/Button/Button7.png)\n\nRaised buttons are a type of button that protrudes above the content. Use it to highlight important actions on the screen, usually with a fixed position. This type of button is suitable for key operations that the user should notice immediately.\n\nThese buttons are also often used in map interfaces and image-based applications for various actions, such as zooming, panning, or other manipulations with image data.\n\n**Contrasting buttons**\n\n![Contrast](/static/images/design/Button/Button8.png)\n\n**Contrasting buttons** are special types of buttons used to highlight actions on a complex background. They create bright and clear contrast, providing excellent visibility even on diverse and saturated backgrounds, such as banners or marketing materials.\n\nThese buttons help highlight actions and ensure good visibility on diverse backgrounds, e.g., in banners\n\n## Anatomy\n\nThe anatomy of a button in the interface includes various design options:\n\n![Anatomy](/static/images/design/Button/Button9.png)\n\n1. **Text only**: Button that contains only text. Such a button is useful when the text clearly and unambiguously conveys the purpose of the button, especially when the text is short and informative. For example, you can use such a button for actions like create or cancel.\n2. **Icons on the right**: Button where the icon is placed to the right of the text. This option is useful for presenting different ways to perform the same action. Use such a button, for example, for the save action, where the user has several options to choose from (save as: PDF, RTF, HTML)\n3. **Icon on the left**: Button where the icon is placed to the left of the text. Use this option when the icon carries important information and needs to be highlighted. For example, you can use such a button for the start or delete actions.\n4. **Icons on the right and left**: Button with icons placed on both sides of the text. Use this option to underline a key action with an icon and provide different paths for its execution. For example, such a button can be used for the add action, where the user has several options to choose from (add: project, resource, document).\n5. **Icon only**: Button that consists only of an icon and does not contain any text. Use this option when the information on the button can be understood visually and requires no additional text explanations. You can also use it for grouping multiple actions compactly in a limited space, giving no room for buttons with text labels. For example, a delete button in a list of items. In this context, you can provide the delete option as a trash bin icon without a text label.\n\n## States\n\nEvery button in the interface has five basic states, which visually indicate the button\'s availability and current action for the user.\n\n![States](/static/images/design/Button/Button10.png)\n\n**Default**: Primary state of the button, in which it is ready for interaction and awaits user actions.\n\n**Hover**: State in which the button is ready for interaction and awaits user actions.\n\n**Disable**: State in which the button is temporarily unavailable for interaction. For better user experience, we recommend you to explain why the button was disabled, especially if this is non-intuitive. You can present this explanation as a text next to the button, or as an on-hover tooltip.\n\n**Loading**: State indicating that the system runs an operation in response to a user-initiated action.\n\n**Selected**: State used for switchable elements where the user can select one of several options. A button in the "Selected" state indicates the current selected state or option.\n\n## Sizes\n\nEach button can have four sizes, which allow choosing the most appropriate option depending on the context.\n\n![Sizes](/static/images/design/Button/Button11.png)\n\n**XS** is an additional size used for actions in components of limited sizes.\n\n**S** is used in situations where standard buttons are too large and take up a lot of space, such as tables or small cards.\n\n**M** is the main size that we recommend by default.\n\n**L** is used to highlight primary actions, in creation forms, modal, or pop-up windows.\n\n**XL** is used where actions need to be highlighted and you have enough space on your website or landing page.\n\n## Form\n\nWith the "pin" property, you can control shape of buttons, setting their style by the following values:\n\n![Form](/static/images/design/Button/Button12.png)\n\n**round**: Button with a round shape, i.e., rounded corners on both sides. This style gives the button a soft and modern look, making it friendly and pleasant to interact with.\n\n**brick**: Button with sharp corners on both sides.\n\n**clear**: Button with sharp corners and no outline on both sides.\n\n**circle**: Button with a circular shape on both sides.\n\nYou can also combine these properties in different variations, creating unique styles for your buttons depending on the design concept and interface requirements.\n\n## Width\n\nThe default button width automatically adjusts to the text, allowing the button to stretch in width to accommodate all text without truncation. However, if you need to control the width of the button, you can use two main properties: auto and max.\n\n![Width](/static/images/design/Button/Button13.png)\n\nauto: Restricts button dimensions to avoid extending beyond the container limits. If the button content does not fit into the container, it is hidden with an ellipsis, indicating the presence of additional text.\n\nmax: Sets a fixed button width equal to the parent container width. If the button content exceeds this width, it is also truncated with an ellipsis, keeping the interface compact and preventing container overflow.\n\n## Recommendations\n\n**Usage**\n\n- Clearly and succinctly phrase the button text so that users immediately understand what will happen after clicking.\n- When using icons, make sure they clearly convey their meaning and your users will easily recognize them.\n- Maintain a balance between icons and text so that both elements are visible and readable, and neither dominates.\n- When using icon-only buttons, add action tooltips on hover so users can see what the icon means.\n\n**Writing texts**\n\n- Words on the button should clearly and concisely convey the essence of the action that will occur after clicking. Avoid long phrases or unclear abbreviations.\n- Use verbs that describe user actions. For example, save, send, delete.\n- Avoid negative words or phrases on buttons. Negative instructions can cause confusion.\n- Stick to a consistent style and format for text on all interface buttons. This helps users easily navigate and understand what actions are available.\n'},{id:"card",title:"Card",description:"",content:"The Card component is used to divide content into semantic blocks. In essence, it is a container for grouping content, with the option to collapse it.\n\n## Usage\n\nThe component comes in four types.\n\n![Usage](/static/images/design/Card/Placement.png)\n\n## **With themes**\n\n![Placement](/static/images/design/Card/Placement1.png)\n\nCards with themes can change the background or stroke color. Often used to describe the error/success of a block or a user warning. This card is most commonly used to combine content in its default color (normal). The theme parameter specifies the card's theme, while the View parameter determines whether the card is stroked or filled.\n\nYou have the following options for cards of this type (container):\n\n**View**: Outlined / Filled\n\n**Theme**: Normal, Info, Success, Warning, Danger (color)\n\n![theme](/static/images/design/Card/theme.png)\n\n- Normal - the basic state of the card with a stroke, used in most cases.\n- Info — used to provide the user with information\n- Success — used to indicate events with positive results.\n- Warning — used to display a warning\n- Danger is a container designed to draw the most attention from the user; it can be triggered by data loss, service interruption, etc.\n\n## **Selectable card**\n\n![Selectable](/static/images/design/Card/Selectable.png)\n\nCards in this category require you to choose from one of the available options. The card has three states: normal, selected, and hovered.\n\nYou have the following options for cards of this type (type = selection):\n\n**selected**: true / false\n\n**disabled**: true / false\n\n## **Raised**\n\nUsed to group content, similar to **Normal** in the With themes group. The main difference is that this card type has a shadow. We recommend using it in situations where the card needs to be highlighted. For exapmle, with widgets:\n\n![Raised](/static/images/design/Card/Raised.png)\n\nRemember to leave enough space between these cards so that the shadow does not fall on the card next to it.\n\nIn the L size, the card has a more 'airy shadow,' so when using this size, it's recommended to choose slightly larger spacing between cards compared to the M size.\n\n**type**: container;\n\n**view**: raised\n\n## **Raised with action**\n\nSimilar to the previous card, but requires clicking on the card. Unlike the **Raised** card, there is a hover state but no \"selected option\" state, as in the Selectable card. We recommend using it when you need to provide the user with a selection option that contains detailed descriptions.\n\nKeep in mind that clicking on it will redirect the user to a nested page. Therefore, users should expect this card behavior. (should be clear from the design of the card)\n\n![WithActions](/static/images/design/Card/WithActions.png)\n\nYou have the following options for cards of this type (type = action):\n\n**disabled**: true / false\n\n## Size \n\n![Sizes M and L, using the example of cards with a shadow (Raised)](/static/images/design/Card/Size.png)\n\nSizes M and L, using the example of cards with a shadow (Raised)\n\nTwo sizes available: M and L. The corner radius depends on the size: L radius (8px) and 2XL radius (16px). The choice of size depends on the location, padding, and size of page controls. For example, if the page uses size L for inputs, buttons, and other elements, the card should also be size L.\n\nThe width and height of the component are determined by its content. The minimum size can be selected with a slight padding from the content. The maximum size can be equal to 100% of the page width.\n\n### Use cases\n\n![Use case](/static/images/design/Card/Usecase.png)\n\nExample of card usage:\n\n1 - themes with fill to inform the user,\n\n2 - card with an outline to group content"},{id:"changelog-dialog",title:"Changelog Dialog",description:"",content:'Your service team can use the changelog to inform users about changes.\n\nThe changelog is displayed once when the user opens the service page. We do not provide an option to reopen the changelog page. Implement it independently if needed.\n\nBecause the changelog is displayed in a modal window, it follows the rules for closing and scaling modal windows.\n\n## Elements\n\nThe changelog is a modal window of size M with chronologically arranged posts. Each post has:\n\n1. Publication date\n2. "New" [label](https://gravity-ui.com/design/guides/label) (optional)\n3. Post header\n4. Post image (optional)\n5. Post text\n6. Action [button](https://gravity-ui.com/design/guides/button) (optional).\n\n![Elements](/static/images/design/ChangelogDialog/ChangelogDialog1.png)\n\n### Publication date\n\nFrom the publication date, the user can understand when a particular change to the service occurred. By default, the date is in the DD Mon YYYY format. You can also use other date formats to match the service locale.\n\n### Label\n\nUse the "New" label for new posts. The service determines which posts to consider new and mark with this label. In the text, you can use other wordings, different from "New".\n\n### Post header\n\nThe post header is used for a brief description of the service change. The header can have any length. We do not recommend:\n\n- To use headers that take up more than one line (contain more than 70 characters), as this worsens the readability of the text.\n- To copy news text to the header.\n\nThe header uses the text-subheader-3 style. We do not provide other text styles for headers.\n\n### Image\n\nThe image is optional and has fixed dimensions of 516x240px. You can use JPG and PNG files as images (GIF images and video files are not supported). Use images when you need to illustrate the post subject. One image is used for both light and dark interface themes.\n\nIf you upload an image larger than 516x240px, it will be scaled and centered on the larger side.\n\nConsidering retina displays, we recommend uploading images scaled up twice on each side, i.e., 1032x480px.\n\n### Post text\n\nThe post text follows the image and can be of any length. We do not recommend:\n\n- To use very long texts (more than 500 characters). If you cannot shorten the text to the recommended length, you can add links to the documentation within the text or provide a button after the text to navigate to the full text.\n- To create subheaders. Given that the recommended text length is concise, you do not need to split text into sections using subheaders.\n\nThe text uses the \'text-body-1\' style. We do not provide other text styles, but you can add formatting, i.e., create bulleted and numbered lists, add strike-through, underline, bold, and italic.\n\n### Action button\n\nThe action button is optional and is located below the post text. Use it to navigate to the full text of the post.\n\nOnly buttons of size M are supported. The button can be of any type, with or without an icon. Stick to a single button type.\n\nWe do not support multiple buttons.\n\n### Other elements\n\nMoreover, under the modal window header, you can add a "View full changelog" link to a changelog page (this can be a separate service page, a storybook, or an external documentation service).\n\n## Usage recommendations\n\nUse changelog:\n\n- When you need to inform the user about significant changes in the service.\n- When you need to keep the user abreast of minor changes. In this case, consider showing the changelog periodically and telling about any minor changes since the latest changelog entry.\n- When you need to remind the user about changes in the service and increase their awareness of previous releases.\n\nWe do not recommend:\n\n- To use the changelog for onboarding users.\n- To use the changelog to inform the user about every minor change in the service.\n'},{id:"checkbox",title:"Checkbox",description:"",content:'A checkbox is a user interface element that allows users to select one or more options from those provided.\n\n## Use cases\n\n![Cases](/static/images/design/Checkbox/Checkbox1.png)\n\nWhen activated, the checkbox does not trigger an action instantly. Users must click a confirmation button (for example, Save, Apply, Submit) to apply it. In most cases, the checkbox is used together with an explanatory label. However, in some scenarios, checkboxes may be used without labels, such as in tables or where including an "enable" label next to each checkbox is redundant. Begin your text with positive wording, for example, use "Enable" instead of "Disable," to prevent the user from solving a logic puzzle.\n\n## Anatomy\n\nThe checkbox consists of:\n\n![Anatomy](/static/images/design/Checkbox/Checkbox2.png)\n\n1. **Container**: Visual rectangular area that surrounds the checkbox. The container indicates boundaries and activates the checkbox.\n2. **Checkmark**: Symbol which appears within the container when the user enables the checkbox. This symbol visually confirms that the user selected the checkbox.\n3. **Text label (optional)**: Text placed to the right of the checkbox. The text label explains the meaning or purpose of the checkbox.\n\n## Sizes\n\nThe checkbox component has two main sizes:\n\n![Sizes](/static/images/design/Checkbox/Checkbox3.png)\n\n**M** is the default size, with standard dimensions suitable in most cases. In this size, the container is 14x14 px and the text label uses a 13 px font.\n\n**L** is used when the checkbox needs to stand out among other interface elements or if the interface requires larger elements for easier use. In this size, the container is 17x17 px, and the text label uses a 15 px font.\n\n## States\n\n![States](/static/images/design/Checkbox/Checkbox4.png)\n\n**Default** is the main checkbox state that the user can enable or disable by a click.\n\n**Hover** is the state when the user moves the cursor over the checkbox area (checkbox + label).\n\n**Disable** is the state when the user cannot interact with the checkbox for some reason.\n\n**Indeterminate** is the state of the header in a checkbox group when one out of several items is selected (usually occurs in tables with multiple row selection).\n\n## Recommendations\n\n### Use\n\n- **Option selection** if you want the user to select one or more options from a list.\n\n- **Enabling/disabling features** if you want the user to enable or disable certain features in the interface. For example, users can enable or disable notifications or automatic playback and other features. In such cases, checkboxes provide clear and intuitive interaction.\n\n- **Multiple selection in tables or lists** if you want the user to select several items for bulk operations, such as deletion or export. This simplifies data operations and facilitates bulk actions.\n\n- **Content or result filtering** if you want the user to select parameters for filtering content or search results.\n\n### Avoid\n\n- **Single option selection**. If you expect the user to select one option from a mutually exclusive set, use radio buttons.\n\n- **Two-position enabling/disabling (instant action)**. If the option has only two states, enabled and disabled, and changes take effect instantly, without an "Apply" button, use switches. Switches present such options more clearly and compactly, and changes apply immediately after switching.\n\n- **Segmented selection**. If you offer several mutually exclusive options that users can select simultaneously in different categories, use segment controls. They allow the user to select options in different segments or categories.\n\n- **Selection from numerous options**. If you provide a long list of options from which to choose a single one, use a dropdown list (select). This saves screen space and facilitates choice from a large set of options.\n\n### Writing texts\n\n- Strive for brevity in text descriptions. Avoid long phrases or complex sentences.\n- Use active verbs that clearly indicate the action associated with the choice. For example, "Subscribe to newsletter" instead of "Newsletter subscription".\n- Give users a full understanding of what will happen when they select the checkbox. For example, "Receive notifications about new articles" instead of "Notifications".\n'},{id:"clipboard-button",title:"Clipboard Button",description:"",content:"Clipboard copy button is a modification of the `Button` `Flat` component with the `ClipboardIcon` icon placed separately.\n\n### Icon\n\nWithin the `ClipboardButton` is a `ClipboardIcon` component, which is an animated icon with two states: Success and Error. To customize the copy button, use the standard button component `Button` with the `ClipboardIcon` icon.\n\n### States\n\n![States](/static/images/design/ClipboardButton/States.png)\n\n### Sizes\n\nThe component supports standard button sizes `XS`, `S`, `M`, `L`, and `XL`\n\n### Behavior\n\nIf content copying is not performed frequently or if the icon reduces readability, the copy button will not appear until the cursor is moved closer.\n\n![In tables, the icon is hidden until the cursor is placed over a cell with content](/static/images/design/ClipboardButton/Use-cases2.png)\n\nIn tables, the icon is hidden until the cursor is placed over a cell with content\n\n### Tooltip\n\nThe component has a tooltip that can be disabled. It is used to indicate what content will be copied.\n\n![The task key is copied in the Yandex Tracker service](/static/images/design/ClipboardButton/Tooltip.png)\n\nThe task key is copied in the Yandex Tracker service\n\n### Use cases\n\nA block code is copied in the documentation.\n\n![Use-cases](/static/images/design/ClipboardButton/Use-cases1.png)\n\nCell values are copied in tables.\n\n![Use-cases](/static/images/design/ClipboardButton/Use-cases2.png)"},{id:"dialog",title:"Dialog",description:"",content:'A **dialog box** is used to display additional content as well as to draw the user\'s attention to a specific action or scenario. The dialog box blocks the user from interacting with the parent page until it is either closed or the action specified in this window is executed.\n\n### Entry point\n\nThe entry point to the dialog box can be a click on a specific trigger (e.g., a button in the interface) or certain actions or conditions in the interface (e.g., an attempt to leave a page without saving data, or changing an account in another tab).\n\n### Sizes\n\nThe size of the dialog box is determined by its content.\n\n![Sizes](/static/images/design/Dialog/sizes.png)\n\n\n**Size S - 480 px**: Used for small notifications/confirmations and forms.\n\n**Size M – 720 px**: Used for small and medium forms\n\n**Size L – 900 px**: Used for large amounts of data and flow within a modal window.\n\n**Custom size**: Used when none of the three options (S, M, or L) are suitable.\n\n### Content area\n\nThe dialog window can contain any type of content. The layout is chosen depending on the requirements of the user.\n\nIf the dialog box contains a form, one of two element layouts is recommended:\n\n<div className="row">\n   <div className="col-12 col-md-6">\n      **Vertical.** \n      \n      Best suited for simple text boxes and size S\n      \n      ![vertical](/static/images/design/Dialog/vertical.png)\n   </div>\n   <div className="col-12 col-md-6">\n      **Horizontal.** \n      \n      Suitable for more complex forms\n\n      ![horizontal](/static/images/design/Dialog/horizontal.png)\n   </div>\n</div>\n\n### Buttons\n\nAction button is required in most cases. If the user does not complete the actions specified in the dialog box, the button is Disabled.\nOn the left side, there\'s a section for custom controls, where you can place secondary buttons and links. For example, references.\n\n![Group 507124116.png](/static/images/design/Dialog/Group_507124116.png)\n\nIn some cases, a Danger button can be used instead of an Action button (e.g., in a dialog box for deleting an entity).\n\n![Group 2087325976.png](/static/images/design/Dialog/Group_2087325976.png)\n\nAction button is not needed if there is no target action, and the dialog box is for informational purposes only. In this case, you can use the Normal style Close button.\n\n![Frame 2087326371.png](/static/images/design/Dialog/Frame_2087326371.png)\n\nSecondary button is always used as a cancel button. Can be used to perform additional actions (e.g., continue without changes).\n\n![Group 2087326024.png](/static/images/design/Dialog/Group_2087326024.png)\n\nThere may be no buttons at all. Typically, a selection must be made within the content area itself; otherwise, the parent interface won’t be available.\n\n![Frame 2087325516.png](/static/images/design/Dialog/Frame_2087325516.png)\n\n### In-dialog Navigation\n\nIf the dialog box includes multiple steps, use the back button to return to the previous step.\n\n![Group 2087326025.png](/static/images/design/Dialog/Group_2087326025.png)\n\nIf the dialog box is nested but the steps are not linear, you can use breadcrumbs in the content area of the window.\n\n![breadcrumbs](/static/images/design/Dialog/breadcrumbs.png)\n\n### Positioning the dialog box on the page\n\nThe dialog box is aligned with the center of the screen both vertically and horizontally.\n\nWhile scaling the viewport, its positioning remains unchanged, and the size of the dialog window can be reduced as long as it does not affect the content.\n\nThe minimum allowed spacing from the top and left screen edges is 20px.\n\n![position](/static/images/design/Dialog/position.png)\n\nIn cases where the window cannot fit within the viewport, the top and left spacing remains unchanged, while the right and bottom edges of the dialog window extend beyond the screen\'s edges. However, this is not recommended. That\'s why the dialog box should be designed so that it fits within the viewport and that the spacing on all sides is at least 20px from the screen\'s edge.\n\n### Closing a window\n\nIn addition to the target action, the modal window can be closed in the following ways:**:**\n\n<div className="row">\n   <div className="col-12 col-md-6">\n      1. Cancel button\n\n      ![cancel_btn](/static/images/design/Dialog/cancel_btn.png)\n   </div>\n   <div className="col-12 col-md-6">\n      2. \'X\' button\n\n      ![x_btn](/static/images/design/Dialog/x_btn.png)\n   </div>\n</div>\n\nIf the window is not modal, it can be closed using one of the following methods:\n\n- By clicking outside the modal window\n- By pressing the Esc button\n\nThe ‘cancel’ and ‘X’ buttons are familiar elements, as they are widely used in dialog boxes. Clicking outside the modal window makes it easier for the user to close it, as they don\'t have to aim their mouse cursor at a specific element. Pressing the Esc key allows to close the window without a mouse.\n\nSince only the dialog box is expected to be interacted with, the parent page\'s content should not scroll.\n\n### Preventing User Data Loss\n\nSince it is easy to close a modal window, there is always a chance to do it by accident. If the user selected only check boxes in the modal window, it is easier to recover lost data than if the user spent considerable time writing code or retyping the 12-digit VIN code of the vehicle. So it’s better to avoid such situations. However, we should not prevent the user from closing the modal window in the usual way.\n\n**To avoid the risk of data loss, we recommend using** an additional confirmation window for data deletion. In this case, the action must be confirmed by the user.\n\n![Pop-up S.png](/static/images/design/Dialog/Pop-up_S%202.png)\n\nWhen closing the modal window, use common sense to determine whether another confirmation window is required. It is important to strike a balance between safety and asking too many questions that may annoy the user.  The purpose of confirmation is to prevent losing the user\'s input while still allowing them to execute the script.'},{id:"dropdown-menu",title:"DropdownMenu",description:"",content:"The component allows the user to select a parameter or action from a context list. A drop-down list can be accessed by clicking a button with three-dots. The icon is customizable and can be replaced. Users can navigate between items on the list using keyboard controls.\n\n\n# **Structure**\n\n![35.png](/static/images/design/DropdownMenu/35.png)\n\n➊ Context menu icon\n\n➋ List item\n\n➌ Separator\n\n➍ Submenu chevron\n\n# **States**\n\n![36.png](/static/images/design/DropdownMenu/36.png)\n\n# Types of **content**\n\n![Types of content](/static/images/design/DropdownMenu/Types.png)\n\n# Size\n\n![42.png](/static/images/design/DropdownMenu/42.png)\n\n**Icon**\n\nThe context menu icon has four built-in sizes by default.\n\nSize S: 24x24 px, M: 28x28 px, L: 36x36 px, and XL: 44x44 px.\n\n![Group 2087326002.png](/static/images/design/DropdownMenu/Group_2087326002.png)\n\n**Component width**\n\nWhen a menu item is longer than the object that triggers it, the menu will expand to match the width of the longest item in the list. The maximum component width is 280 px.When the text of a menu item exceeds its maximum width, it will be truncated with an ellipsis.\n\n# Scope\n\n![43.png](/static/images/design/DropdownMenu/43.png)\n\n**Configurable call icon**\n\nThe context menu icon can be resized or replaced with a different one. The component uses a three-dot button with a 16px size by default.\n\n![44.png](/static/images/design/DropdownMenu/44.png)\n\n**Optional menu item icon**\n\nYou can add icons next to context menu items to help the user understand their functions. The default size of the icon in the context menu is 16x16px.\n\n![41.png](/static/images/design/DropdownMenu/41%201.png)\n\n**Nested dropdown submenus**\n\nElements of the context menu can be nested within each other. The default nesting depth is set to support up to three levels.\n\n![46.png](/static/images/design/DropdownMenu/46.png)\n\n**Positioning**\n\nBy default, the dropdown menu appears beneath the element that invokes it, with the menu icon in the right corner. If the interface does not support a drop-down list beneath the switch icon, the list expands above the icon.\n\n![47.png](/static/images/design/DropdownMenu/47.png)\n\n**Closing the context menu**\n\nYou can close the context menu by clicking on the area outside of it or by pressing the ESC key. By default, the menu collapses during page scrolling, but this behavior can be disabled.\n\n# Recommendations\n\nDropdown menus are used when there are at least two options to choose from.The optimal number of options is between 5 and 10.\n\nWhen arranging menu elements, ensure a logical order by placing the most frequently used and popular options at the top.Try out different menu items and refine them as needed."},{id:"hotkey",title:"Hotkey",description:"",content:"A modified label containing a combination of hot keys that are assigned to an interface action.\n\n## Platforms /. **platform**\n\n![Group 2087325957.png](/static/images/design/Hotkey/Group_2087325957.png)\n\n1. **Mac** – for iOS device keyboards\n2. **PC** – for other keyboards\n\n### Structure\n\n1. **Key** — a symbol on the keyboard that must be pressed in order to perform a quick action. Can be a letter, number, special keyboard symbol, or a word describing an action (e.g., Click). Make sure that the symbols match the symbols on the keyboard.\n   Text style: Text/Body1, color: Text/Light Complementary.\n2. **Plus** — used for character communication and maintaining the correct order of keystrokes if necessary.\n   Text style: Text/Body1, color: Text/Light Hint.\n\n![8.png](/static/images/design/Hotkey/8.png)\n\n## Use cases\n\n- **in [ActionTooltip](/design/guides/action-tooltip)**, to indicate hotkeys assigned to the action of a specific button\n\n![example](/static/images/design/Hotkey/example1.png)\n\n- **in a separate hotkey panel** that lists all of the options available in the service\n\n![example](/static/images/design/Hotkey/example2.png)\n\n- in the [List](/design/guides/list-item) of action buttons, if any of them are assigned hotkeys\n\n"},{id:"label",title:"Label",description:"",content:'A label is a textual description of the attributes of an object, such as its status or type. Labels are used to categorize, label, or classify entities, as well as to mark them up in a Key:Value format.\n\n### When to use a DLQ\n\nLabels are used everywhere (e.g., in cards, in tables, on entity pages) to indicate attributes of objects and help users quickly identify and categorize content. Labels are usually displayed next to the related objects.\n\nAnother application option is displaying the number of objects that don’t fit in the list. In this case, hovering over the label shows a Popover with the list of the remaining entities.\n\n![DLQ](/static/images/design/Label/DLQ1.png)\n\nLabels can also be used as tags to organize entities and make working with them easier.\n\n![DLQ](/static/images/design/Label/DLQ2.png)\n\nWhen displaying labels in a table, limit the number of labels in a cell (no more than 2-3 labels in a row and no more than 2 columns with labels in one table) and the maximum number of characters (no more than 20 characters followed by an ellipsis).\n\n### Structure\n\n![Structure](/static/images/design/Label/Structure2.png)\n\n![Structure](/static/images/design/Label/Structure.png)\n\n![Application Examples](/static/images/design/Label/Application.png)\n\n1 — Left icon: optional and non-interactive. Used for faster information retrieval.\n\n2 — Text: a label shouldn’t exceed 20 characters. You can use adjectives (e.g., New, Active, Free), Participles (e.g., Stopped), Nouns (e.g., Discount), and Adverbs. Label text should not contain verbs (e.g., Enable). If you need to use verbs, use buttons instead.\n\n3 — An alternate version of the text in the "Key: Value" format, which is used to manually mark objects. For example, you could label the object "service: delivery" or "release: 23."\n\n4 — Right button: interactive. Can be an exit icon or copy icon.\n\n### Sizes\n\n![Sizes](/static/images/design/Label/Sizes.png)\n\n**There are three label sizes:**\n\n**XS** - Often used in tables, lists, headers, popups, and entity pages.\n\n**S** - Used to preview newly added marks on forms and other areas if there is enough space.\n\n**M** - Used less often because of its resemblance to a button.\n\n### Themes\n\n![Themes](/static/images/design/Label/Themes.png)\n\n![Themes](/static/images/design/Label/Themes2.png)\n\n**Without semantic color**\n\n**Default** — The default label, which is often used to highlight information without semantic coloring.\n\n**Clear** — Doesn\'t have a background, only an outline. Used for minimal emphasis\n\n**With semantic coloring**\n\n**Unknown** — A neutral option used when there is no need to focus on the information contained within the label.\n\n**Accent** — Used for highlighting important information and for “in progress” operations.\n\n**Success** — Used to indicate a successfully completed process or an entity\'s "health".\n\n**Warning** — Used for emergency situations, such as to alert the user about something\n\n**Danger** — To draw the user\'s full attention, such as when an error has occurred and immediate action is required to fix it.\n\n### Semantic Labels vs Buttons\n\nLabels, including those with semantic coloring, are used to indicate states. The only way to interact with them is to hover over the label or click the icon. The label cannot be set to "selected." If you need to create an interactive element based on semantic labels (for example, for status filters), use buttons. They have a pressed (applied) state - selected - and can be used with semantic colors.\n\n### Modifications and states\n\nAll labels have five states: text only, icon before text, icon after text, icon before and after, and only one icon.\n\n![States](/static/images/design/Label/States.png)\n\n![States](/static/images/design/Label/States2.png)\n\nYou can interact:\n\n1. With the entire label. For example, to display a Popover with detailed information by hovering over a label.\n\n2. With the right icon only. Depending on the icon, clicking on it may delete the label or copy its value.\n\nWhen adding label interactions, make sure they are intuitive and straightforward.\n\n### Additional features\n\nYou can create dynamic filters for sorting content based on the label. For example, clicking on the plus icon adds a new value, while clicking on the cross icon cancels the filter.\n\n![Features](/static/images/design/Label/Features.png)\n\nIf your interface allows users to create their own labels and mark objects, they should also be able to add and delete them.\n\n### Customization\n\nThe label\'s colors, fillets, sizes, and paddings can be customized. The text contained within the label should be easy to read.\n\n![Customization](/static/images/design/Label/Customization.png)\n\nChange the appearance or color of a label when a user hovers over it to indicate the possibility of interaction.'},{id:"links",title:"Links",description:"",content:"A clickable element with navigation functionality. When clicked, takes the user to another page of an external or internal service. Less often, navigates the user to a different section of the page.\n\nHas three types: normal (accent), primary (black), and secondary (gray).\n\n**Normal**\n\nIs the most common and well-known user pattern. Used to visually distinguish elements within text, tables, and as part of navigation. Also used on error pages and null\nstates.\n\n**Primary**\n\nUsed when it is obvious to the user that an element is interactive, but accent-colored links will visually overload the interface and disrupt the balance of page elements.\n\n**Secondary**\n\nSimilar to primary links, this type is used when it is obvious to the user that the element is interactive and the goal is not to distract the user from the page's emphasis elements. Usually used in breadcrumbs or when displaying secondary attributes.\n\n## **States**\n\nLinks always have two states: default and hovered.\n\n![Frame 507123500.jpg](/static/images/design/Links/Frame_507123500.png)\n\nYou can enable tagging for visited links, if needed.\n\n## **Can be used as:**\n\n- stand-alone elements\n- part of the text\n\nCan include an icon to indicate an external link\n\n![Frame 507123501.jpg](/static/images/design/Links/Frame_507123501.png)\n\n## Size\n\nThe font used for links should be proportional to the surrounding text and align with the overall hierarchy of the page.\n\n## Recommendations \n\nThe text of the link should be self-explanatory even when used without the rest of the text and tell the user what the link leads to (service name, title, or description of the section)\n\n{/* <aside>\n⛔ **No**\n\nDocumentation\n(if linked to a particular section)\n\nread here\n\n</aside>\n\n<aside>\n✅ **Yes**\n\nIn the Preparing for Data Transfer section\n\nread FAQ\n\n</aside> */}"},{id:"list-item",title:"List and list-item",description:"",content:'**List** — a universal list component that serves as a container with data rows organized into a single vertical column. The component sorts its child list-item elements, supports multiple sizes, and enables keyboard selection control and filtering.\n\n# **List structure**\n\n![60.png](/static/images/design/List/60.png)\n\n➊ Filter area\n\n➋ List item\n\n➌ Scroll bar (scrollbar)\n\n➍ List item under cursor\n\n# **List-item structure**\n\n![61.png](/static/images/design/List/61.png)\n\n➊ Sorting icon\n\n➋ Item icon\n\n➌ Text block\n\n➍ Additional action button (displayed on hover)\n\n# Size\n\n![65.png](/static/images/design/List/65.png)\n\n**List-item**\n\nAll list items (List-item) support rendering in 4 sizes: S, M, L, XL. The sizes and paddings correspond to the library items with which the component interacts, such as select, input, and button, which support similar size variables.\n\n![63.png](/static/images/design/List/63.png)\n\n**List**\n\nBy default, the width of the List component is dynamic and is calculated based on the width of the longest item on the list. The width can be set to a fixed value or inherit the width of the object that triggered the display of the list (select, input).\n\n# States\n\n![62.png](/static/images/design/List/62.png)\n\n# Types of **content**\n\n![Group 2087326004.png](/static/images/design/List/Group_2087326004.png)\n\n{/* **Simple list item (by default)**\n\nBasic list item that does not display additional items\n\n![Group 2087326006.png](/static/images/design/List/Group_2087326006.png)\n\n**List item with an icon**\n\nAny list item can have one or more icons on the left or right of the component.\n\n![Group 2087326007.png](/static/images/design/List/Group_2087326007.png)\n\n**Sortable list item**\n\nFor sortable elements, you can specify which side the "drag" icon appears on\n\n![Group 2087326008.png](/static/images/design/List/Group_2087326008.png)\n\n**List item with an additional icon on hover**\n\nFor all list item options with icons or sortable items, an additional icon can be displayed when the component is hovered over.\n\n--- */}\n\n# List-item features\n\n![59.png](/static/images/design/List/59.png)\n\n**Multiple icon support**\n\n**List-item** elements can have one or more icons placed on the left and right of the component.\n\n![64.png](/static/images/design/List/64.png)\n\n**Changing the sorting order**\n\nFor items in the list, you can activate list item sorting.The sort icon is always displayed at the top of the list by default.\n\n# List features\n\n![66.png](/static/images/design/List/66.png)\n\n**Customizable height for the main container of the list**\n\nThe height of list items or a function that returns the height value can be dynamically set or specified with an exact value in pixels (px). If the list items exceed the maximum height, a scroll bar appears.  The height can be set manually or adjusted dynamically.\n\n![70.png](/static/images/design/List/70.png)\n\n**Single and multiple selection**\n\nThe component supports both single and multiple item selection.\n\n![68.png](/static/images/design/List/68.png)\n\n**Filter and search**\n\nOptionally, the component can include an input field for quick filtering of items in the list. The filter placeholder can be changed by default depending on the component\'s task.\n\n![69.png](/static/images/design/List/69.png)\n\n**Call triggers**\n\nBy default, the list component is triggered by interactions with other page elements such as select, label, and button, and serves as a suggestion feature for the Input component.\n\n![67.png](/static/images/design/List/67.png)\n\n**Virtualization**\n\nWhen the virtualization flag is enabled, the browser renders only a subset of rows at a time, significantly reducing the time required to re-render components. With this method, also known as "infinite loading," new items are added to the list as the user scrolls down to a specific threshold item (trigger).\n'},{id:"loader",title:"Loader",description:"",content:"{/* ![Example](/static/images/design/Loader/Example.gif) */}\n\nAn indicator that shows the progress of a task, such as loading, unloading, processing, and so on, until the interface is ready for user interaction. The indicator does not show measurable progress; rather, it indicates that the process has not yet been completed and is still ongoing.\n\n### **Application**\n\n✅\xa0**When to use**\n\n1. When loading takes more than 300 ms. The loader should not be displayed for extremely short intervals, as this causes blinking that might be uncomfortable for the user. If you choose to show the loader, avoid the blinking effect. If the loading takes less than 300 ms, don't display anything.\n2. When the type of content cannot be predicted.\n3. When using a loader for asynchronous loading, it should be displayed exactly where the loading is taking place. The loading of a single element should not block the rest of the interface.\n\n{/* ![Application](/static/images/design/Loader/Application.png) */}\n\n\n\uD83D\uDEAB\xa0**When not to use**\n\n1. If the loading time exceeds 10 seconds and the exact duration is known, a progress bar should be displayed.\n2. If the type of content can be predicted, consider using a skeleton.\n3. When loading is initiated by a button click, using the state of the button as feedback is sufficient, especially in modal windows.\n\n### Sizes\n\n![Sizes](/static/images/design/Loader/Sizes.png)\n\n1. **S** — Basic size. Used in input fields, pop-up windows, table cells, and other limited-space areas.\n2. **M** — medium size size, used in cards and tables\n3. **L** — large size, used on entire pages and large modal windows (dialog)\n\n### Examples of applications\n\n1. When the content has not yet been displayed.\n\n   ![Example](/static/images/design/Loader/Example5.png)\n\n2. Over the content if it's being updated or modified. Here’s how to use the loader over the content:\n\n   ![Content transparency 30%](/static/images/design/Loader/Example1.png)\n\n   Content transparency 30%\n\n   {/* ![Loader on a background layer](/static/images/design/Loader/Example2.png)\n\n   Loader on a background layer */}\n\n3. Try to avoid layering the loader on the content if there is space for this.\n\n   ![Example](/static/images/design/Loader/Example3.png)\n\n4. If the hint provides useful information, such as an explanation of the ongoing process, it may be included. Since the loader already shows the user that loading is in progress, no additional disclosures are needed.\n\n   ![Example](/static/images/design/Loader/Example4.png)"},{id:"paginator",title:"Paginator",description:"",content:'This component allows users to navigate the content displayed page by page, for example, in tables.\n\n![IMG - 8.png](/static/images/design/Paginator/paginator-0001.png)\n\n## When to use a DLQ\n\n✅\xa0**When to use**\n\n- In all cases with paginated display.\n- To enable the user to skip several pages or go directly to the desired page.\n- To enable the user to customize the number of displayed rows.\n- To fix the size of sections within a page so that the automatic content loading at the top is not shifting the bottom content.\n\n![3.png](/static/images/design/Paginator/paginator-0002.png)\n\n\uD83D\uDEAB **When to avoid**\n\nWhen you need a seamless transition between search result pages, use automatic loading or loading by a button, unless this slows down the page.\n\n<div className="row">\n   <div className="col-12 col-md-6">\n      ![2.png](/static/images/design/Paginator/paginator-0003.png)\n   </div>\n   <div className="col-12 col-md-6">\n      ![1.png](/static/images/design/Paginator/paginator-0004.png)\n   </div>\n</div>\n\n## Structure\n\n![IMG - 18.png](/static/images/design/Paginator/paginator-0005.png)\n\n1. **Current page.** Shows the serial number of the displayed page.\n2. **Previous page.** Opens the previous page.\n3. **Next page.** Opens the next page.\n4. **Last page of content.** Shows up if the total content is known and can be divided into pages right away. Opens the last page by a click.\n5. **Overflow icon.** Shows up if the number of pages exceeds four.\n6. **Forward/backward switches.** Switch pages one by one.\n7. **Go to the first page.** Opens the first content page.\n8. **Go to a specific page.** Opens the specified page when the user enters the page number and presses Enter.\n9. **Number of items per page.**  A switch for the number of elements displayed on one page.\n\nYou do not have to use all elements of the structure together. You can find the available configurations under "Modifications".\n\n## Sizes\n\nBy default, the size of the buttons, input, and select in the paginator is M.\n\n![Frame 2087326211.png](/static/images/design/Paginator/paginator-0006.png)\n\n## States\n\n![IMG - 19.png](/static/images/design/Paginator/paginator-0007.png)\n\n**First page** shows the first page.\n\n**Second/next** **page** shows the second and next pages.\n\n**Last page** shows the last page.\n\n## Modifications\n\n![IMG - 20.png](/static/images/design/Paginator/paginator-0008.png)\n\n1. **Page Size Options and Show Input**: You can disable these fields if the user cannot go to a specific page or control the amount of content displayed on the page.\n2. **Total Unknown** only displays the current page. Use when the total number of elements is unknown\n3. **Hide Pages** ensures page switching without serial numbers. Use when the list of elements is dynamic and the number of pages, as well as the serial number, will constantly change and confuse the user.\n4. **Compact** is a compact format without text. Use when the interface space is limited (for example, in dialog boxes)\n\nFor mobile device interfaces, you can use the mobile version of the paginator.\n\n![IMG - 23.png](/static/images/design/Paginator/paginator-0009.png)'},{id:"popover",title:"Popover",description:"",content:'A popover is a tooltip that appears when hovering over or clicking on an element, or when focusing on an element using the keyboard.\n\nIt is used to provide context or additional details without leaving the current screen. Popover enhances the user experience by providing quick access to the required information without cluttering the main interface.\n\n## Types of popover\n\n### Info\n\nFor use in regular interfaces\n\n![1.png](/static/images/design/Popover/popover-0001.png)\n\n### Special\n\nFor use in promos\n\n![2.png](/static/images/design/Popover/popover-0002.png)\n\n### **Announcement**\n\nUse for moderate highlight in announcements and notifications\n\n![3.png](/static/images/design/Popover/popover-0003.png)\n\n## Parameters\n\nThe below parameters can be configured for all types of Popover: Info, Special, and Announcement:\n\n- Sizes\n- Content type\n- Positioning\n- "Close" button\n- Opening and closing method\n- Timing\n\n### **Sizes**\n\nThe component sizes vary in font size and margins from the edges. The width and height of the component adapt to fit the content.\n\n\n<div className="row">\n   <div className="col-12 col-md-6">\n      **S** has the font size of 13 px and side margins of 16 px\n\n      ![4.png](/static/images/design/Popover/popover-0004.png)\n   </div>\n   <div className="col-12 col-md-6">\n      **L** has the font size of 15 px and side margins of 24 px\n\n      ![5.png](/static/images/design/Popover/popover-0005.png)\n   </div>\n</div>\n\n### Content type\n\nThe component supports the following elements:\n\n1. header\n2. description\n3. Action buttons (you can use one or two buttons, and swap buttons)\n4. Close icon\n5. Pin (tail) is an additional indicator of a link to the interface element. It helps when there are many elements around, and you need to focus user attention on a specific one\n\n![6.png](/static/images/design/Popover/popover-0006.png)\n\n(add here a picture with numbers indicating each element)\n\n### Positioning\n\nThe popover can appear on different sides of the element depending on its position in the interface. If you use the pin, it will be directed towards the center of the interface element.\n\n(add here examples of pin location and positions)\n\n### "Close" button\n\nUse the "Close" button to close the popover if you trigger it by a click rather than hover over or focus on the interface element\n\n![7.png](/static/images/design/Popover/popover-0007.png)\n\n### Method of opening and closing\n\n- **On element hover**\n   In this case, the component disappears when the user hovers out of the element.\n- **On element click**\n   Use a cross icon to close the component in this case.\n- **On element focus using the keyboard**\n   The popover disappears when the element loses focus.\n- **Can open spontaneously**\n   When the user lands on the page, the Popover will already be open. Suitable for popovers in ads and tutorials. Use the cross icon to close the component.\n- **In response to any actions in the interface**\n   For example, in onboarding, when you provide a series of popovers.\n\n### Timing\n\n- **Without delays in appearance and disappearance**\n   The popover will open and close instantly. Suitable for simple regular popovers.\n- **With a delay in appearance and disappearance**\n   Use a delay in appearance if your page includes many elements that trigger popovers. It helps to avoid accidental hovering over elements and unwanted popovers. Use the closing delay if the tooltip contains buttons. In this case, the user can move the cursor to the button before the tooltip closes.\n- **With a delay in disappearance**\n   Use this option when you do not need to delay appearance, but your popover contains buttons.\n\n## Special cases\n\nIn most cases, popover is a good choice for providing additional information. However, in certain cases, other components should be preferred.\n\n- If you have a complex tooltip and the number of elements supported within the Popover component is not enough, you can design the tooltip based on the [Popup](/design/guides/popup) component.\n- If you need to provide the user with an explanation or additional information about the action on button click, avoid Popover. Use [Action Tooltip](/design/guides/action-tooltip) or [Tooltip](/design/guides/tooltip) instead.'},{id:"popup",title:"Popup",description:"",content:"The Popup element is a hovering element that appears when on hover over or click on an interface element, or when focusing on an element using the keyboard.  The Popup also serves as the underlying structure for the [Popover](/design/guides/popover) component. Use it when the built-in capabilities of the [Popover](/design/guides/popover) component are insufficient.\n\n## When to use Popup\n\n- When the hovering element contains an action. In this case, use Popup as an alternative to a dialog box, if you need to keep the context of the current page\n\n   ![Popup](/static/images/design/Popup/popup-0001.png)\n\n- When you cannot use [Popover](/design/guides/popover) because of too much content. For example, when you need to provide more details about the object in your tooltip, giving technical characteristics and details.\n\n   ![Popup](/static/images/design/Popup/popup-0002.png)\n\n\n## Style\n\nYou cannot customize the color and style of the popup. You can only change its location and the presence of a tail:\n\n(add a picture about tails here)\n\nYou can place any content in the popup body. When designing the content, stick to the basic margins of the [Popover](/design/guides/popover) component and general guidelines. Try not to overload the Popup so that it does not look bulky.\n\n## Positioning\n\nYou can place Popup anywhere on your page depending on its layout. Make sure that it overlaps as little important information on the page as possible.\n\n![Positioning](/static/images/design/Popup/popup-0003.png)"},{id:"progress",title:"Progress",description:"",content:"This is a component for embedding a horizontal bar chart into various interfaces. It can show data distribution, share, or progress.\n\n## Use cases\n\n✅\xa0**When to use**\nUse it when you need to show the level of completion or filling of an entity such as free space on the disk, the number of completed tasks, etc.\n\n\uD83D\uDEAB**When not to use**\nWhen you need to show a single value without comparison. For example, you can use Progress to show 15/60, but not 15 alone.\n\n## Structure\n\n![Structure](/static/images/design/Progress/progress-0001.png)\n\n1. Color of the indicator. Required part\n2. Text. Use only with size M, optional part.\n3. Background. Required part\n\n## Sizes\n\n![Sizes](/static/images/design/Progress/progress-0002.png)\n\n1. **M** is the only size that has text. Use in sections with a large amount of space, on pages where the progress indicator is the key element.\n2. **S** is used in tables, cards, and separately where progress is not the only key component on the page\n3. **XS** is used in narrow places, where you need to keep your content compact.\n\n## Themes\n\n![Themes](/static/images/design/Progress/progress-0003.png)\n\n**Default** is most often used for neutral cases, when you do not need to draw extra attention to progress, for instance, when the page includes more important elements\n\n**Info** is also used for neutral cases, where you need to put more emphasis on progress, or to show that the operation is in progress\n\n**Success** is used for successfully completed processes or to indicate that the system is running without issues\n\n**Warning** is used in unusual situations to warn the user about something, for example, to draw user attention to an impending issue.\n\n**Danger**is used to attract maximum attention, when an error has occurred, and the user needs to take actions to resolve the problem: disk space has run out, system has failed, etc.\n\n**Misc** is used in neutral cases, when you do not want to use Default.\n\n## Scope\n\n1. **Changing the color depending on the progress value**. You can configure this component to change color depending on the progress value, for example, the standard indication is blue (info), and 100% is green (success).\n\n   ![Scope](/static/images/design/Progress/progress-0004.png)\n\n2. **Loading animation. Use** it to show real-time progress to the user, for example, when uploading files from a computer.\n\n   ![Scope](/static/images/design/Progress/progress-0005.png)\n\n3. **Custom colors.** You can use your set of Progress colors when all other options do not fit: use a custom color and combine multiple colors.\n\n   ![Scope](/static/images/design/Progress/progress-0006.png)\n\n\n## Use cases\n\nYou can combine this component with text, embed it into other components, for example, wrap Progress in a card or table, combine it with explanatory text, action, etc.\n\n1. In sections with file upload/download\n\n   ![Progress](/static/images/design/Progress/progress-0007.png)\n\n2. In cards, for example, in a checklist with issues\n\n   ![Progress](/static/images/design/Progress/progress-0008.png)\n\n3. In tables, e.g., to show disk usage.\n\n   ![Progress](/static/images/design/Progress/progress-0009.png)"},{id:"radio",title:"Radio",description:"",content:'Used when you have to choose between several mutually exclusive options.\n\n### When to use a DLQ\n\nSimilar to checkbox, Radio doesn\'t trigger action immediately. To do this, you must click the confirmation button (Save / Apply / Send).\n\nThe explanatory text on the label should answer the question, "How?" or "Which?"\n\n**When to not use**\n\nRadio cannot be used to switch between page or menu content. This functionality is supported by the [radio-button](https://gravity-ui.com/design/guides/radio-button) and tab components.\n\n### Structure\n\n![Structure](/static/images/design/Radio/radio-content.png)\n\n1 — Radio element, 2 — explanatory label\n\nRadio is always used with a label that explains its meaning.\n\nThe first option is selected by default.\n\nYou can also leave the toggle controls unselected (when all options are removed).\n\nOnce an item within a group has been selected, the user cannot deselect it to return the group to its original state (without refreshing the page).\n\nWhen using a component, we recommend that you always select the first option in the list.\n\n### Sizes\n\nComes in two sizes: M and L. The size of the component is determined by the size of the page controls. For example, if the page uses size L for inputs, buttons, and other elements, then the radio should be the same size.\n\n![Sizes](/static/images/design/Radio/radio-size.png)\n\n### States\n\n![States](/static/images/design/Radio/radio-state.png)\n\nDefault – when the user does not interact with the element\n\nHover – when hovering over an element and a text label\n\nChecked – selected state\n\nDisabled – disabled state, when the selected option is not available for interaction\n'},{id:"radio-button",title:"Radio Button",description:"",content:"RadioButton is a set of two or more buttons arranged in a row and combined into a group, working on the principle of band switches in radio receivers. In order to avoid confusion with Radio switches, they are also referred to as Segmented-control.\n\n## When to use a DLQ\n\nRadioButton is used to choose from two or more options when filling out a form, filtering a list or table, changing a page's layout, or adjusting a tool's operating mode. It is more user-friendly than a drop-down menu because all options are displayed at once.\n\nRadioButton options must be contextually related and mutually exclusive.\n\nThe number of options should be limited to 2-5, and their names should be brief (up to 3 words).\n\nWhen initializing a RadioButton, at least one option should be selected by default.\n\n## When not to use\n\nIf multiple options are available, use a checkbox or a drop-down list (Select).\n\nFor options like “Yes / No” or “On / Off”, use a checkbox or switch (Switch).\n\nIf there are more than 5-6 options or the option names are long, use a group of radio switches (Radio) or a drop-down list.\n\nIt is not acceptable to use a RadioButton for page navigation or a progress bar (e.g., in a wizard). To navigate on the page, use a group of tabs (Tabs).\n\n### Sizes\n\nM is the standard size for desktop interfaces, and XL is the standard size for mobile interfaces. Other sizes may be used as well, for example, to maintain visual consistency with other elements on the page or in the dialogue box.\n\n![Sizes](/static/images/design/RadioButton/Sizes1.png)\n\nBesides adjusting button heights, you can also customize the sizes of the internal padding, the button corners' rounding, and the font\n\nButtons with options can have varying widths and can be automatically adjusted to fit the content (Auto width). Alternatively, they can be the same width, with the width of the container split in half (Max width).\n\n![Sizes](/static/images/design/RadioButton/Sizes2.png)\n\nThe last option is used when the names differ by only a few characters; otherwise, the names may extend beyond the button edges.\n\nTry to keep the buttons within RadioButton the same size, even in Auto mode, so that the element as a whole is well-balanced.\n\n### Content\n\nIn addition to the text (Label), the buttons may include an icon and a counter. As in the Button element, the icon can be displayed with text (Icon and Label) or without text (Icon only). Do not combine buttons with different types of content within the same RadioButton.\n\nThe Counter informs the user of the number of objects contained within the option.\n\n![Content](/static/images/design/RadioButton/Content.png)\n\nThe button text within a RadioButton should start with an uppercase letter. The text should not be cut off with an ellipsis or have repeated parts.\n\nIn the icon-only version, when hovering over the icons, tooltips (Tooltip) containing the icon names must be displayed .\n\nIn forms, it is recommended to use the text-only or text-and-icon option. The icon-only mode is typically used to switch between layouts or choose options that are already familiar to the user, such as switching between a list and thumbnails of objects or choosing the type of formatting in the editor.\n\n### States\n\nIn addition to the default state (Default), buttons can also be in the (Selected) and/or disabled (Disabled) states. When hovered over (Hover), buttons also display states. Only one button can be selected.\n\n![States](/static/images/design/RadioButton/States.png)"},{id:"radio-group",title:"Radio Group",description:"",content:'Used when you have to choose between several mutually exclusive options.\n\n### When to use a DLQ\n\nSimilar to checkbox, Radio doesn\'t trigger action immediately. To do this, you must click the confirmation button (Save / Apply / Send).\n\nThe explanatory text on the label should answer the question, "How?" or "Which?"\n\n**When to not use**\n\nDo not use Radio to switch between page or menu content. This functionality is supported by the [radio-button](https://gravity-ui.com/design/guides/radio-button) and tab components\n\n### Structure\n\nContains multiple Radio components, with 1 — Radio element, 2 — explanatory label.\n\n![Structure](/static/images/design/RadioGroup/Structure.png)\n\nRadio is always used with a label that explains its meaning.\n\nThe first option is selected by default.\n\nYou can also leave the toggle controls unselected (when all options are removed).\n\nOnce an item within a group has been selected, the user cannot deselect it to return the group to its original state (without refreshing the page).\n\nWhen using a component, we recommend that you always select the first option in the list.\n\n### Sizes\n\nThe page provides two sizes: M and L. The size of the other page controls determines the choice of this component size. If the page uses size L for inputs, buttons, and other elements, we recommend using the matching size for radio buttons. The size selected for the controls also determines the font size on the page.\n\n![Sizes](/static/images/design/RadioGroup/Sizes.png)\n\n### Positioning\n\nYou can use this element both in horizontal and vertical layout.\n\n![Positioning](/static/images/design/RadioGroup/Positioning.png)\n'},{id:"select",title:"Select",description:"",content:"A component for selecting one value or a set of values from a specified list. When the user clicks the control, a drop-down list opens with a set of values for the user to choose from.\n\n## Use cases\n\n![1.png](/static/images/design/Select/select-0001.png)\n\n**When to use?**\n\n- When you expect the user to select values from a specified list.\n\n**When to avoid?**\n\n- When you want to show all values to select from. For such use cases, use [Radio](/design/guides/radio), [Checkbox](/design/guides/checkbox), or Radio Button.\n\n## Options\n\n**Single selection**\n\n![2.png](/static/images/design/Select/select-0002.png)\n\n- Use for selecting a single value from a list.\n- After the user selects a value, the drop-down list is closed.\n- The control shows the selected value.\n\n**Multiple selection**\n\n![3.png](/static/images/design/Select/select-0003.png)\n\n- Use when you expect the user to select more than one value from a list.\n- In the list, the selected value is marked with a checkmark on the left.\n- The control shows the selected values separated by commas.\n- To close the drop-down list and apply the selected values, the user clicks the blank space outside or the confirmation button in the list (if provided).\n\n## Types\n\nThe control comes in two types: **Normal** and **Clear**, both having the same set of functions but looking different and applied depending on the context.\n\n![4.png](/static/images/design/Select/select-0004.png)\n\n**Normal**\n\n- The most frequently used type.\n- The distinctive feature is that the component has a 1 px border, and elements inside (text and chevron) have margins from the edges.\n- Use this component in forms where you need to separate form elements using margins.\n\n**Clear**\n\n- The distinctive feature is that the component has no border, and elements inside (text and chevron) are flush with the input field edges.\n- Use it when the Normal type creates visual noise.\n- Using this type, make sure that the component meaning remains clear to the user.\n\n## Structure\n\n![5.png](/static/images/design/Select/select-0005.png)\n\n1. Inline label\n2. Value\n3. Clear icon\n4. Chevron\n5. Error icon\n6. Error description\n\n### Inline label\n\n   ![6.png](/static/images/design/Select/select-0006.png)\n\n   - An optional element.\n   - Adds an explanation to the select field name.\n   - It can replace the external label in the form.\n\n### Value\n\n   ![7.png](/static/images/design/Select/select-0007.png)\n\n   - A mandatory element.\n   - By default, it is a hint to help the user understand what can be selected from the list of values.\n   - The place where the selected value or values are displayed.\n\n### Clear icon\n\n   ![8.png](/static/images/design/Select/select-0008.png)\n\n   - An optional element.\n   - Use it to quickly clear the component of selected values or value options without invoking the dropdown list.\n   - It can show up when at least one value has been selected.\n   - After clearing, the focus remains in the component.\n   - It changes color on hover.\n\n### Chevron\n\n   ![9.png](/static/images/design/Select/select-0009.png)\n\n   - A mandatory element.\n   - Use it to differentiate the component from other visually similar components (for example, [TextInput](/design/guides/text-input)), to identify the component in the form.\n   - The component can only be with a chevron, for instance, when you need a compact view.\n   - Despite the presence of a chevron, the entire component area is clickable.\n\n### Error icon\n\n   ![10.png](/static/images/design/Select/select-0010.png)\n\n   - It is displayed only in the Inline Error state\n   - It works together with an error description Tooltip shown on icon hover. It helps to keep the user informed but save space.\n\n### Error description\n\n   ![11.png](/static/images/design/Select/select-0011.png)\n\n   - It shows up only in the Outline Error state.\n   - The error description is placed at the bottom left of the field when you need to immediately display the error cause.\n\n## States\n\nIt has several states: **Suggest, Default, Hover, Disabled, Active, Inline Error, Outline Error.**\n\n![12.png](/static/images/design/Select/select-0012.png)\n\n1. **Suggest.** Inactive state, when the user is not interacting with the component directly and has selected nothing in it. In this state, it can hint the user what they can select.\n2. **Default.** Inactive state, when the user is not interacting with the component directly and already selected something in it. In this state, the hint value changes to the selection from the dropdown list.\n3. **Hover.** Active state when the user moves the cursor over the component area.\n4. **Disabled.** Inactive state of the component when the user cannot interact with it.\n5. **Active.** Active state enabled when the user has clicked the control. A dropdown list opens on click.\n6. **Outline error.** A component state triggered by a validation error, which is displayed at the bottom of the field with an explanation of what has happened.\n7. **Inline error.** A component state triggered by a validation error, but the error explanation does not show up, only a special icon. When you hover over the icon, a Tooltip with the error appears.\n\n## Sizes\n\n![13.png](/static/images/design/Select/select-0013.png)\n\nThere are four component sizes: **S, M, L, XL**.\n\n| Size | Height | Text style | Rounding |\n| --- | --- | --- | --- |\n| S | 24 | Body 1 | 5 |\n| M | 28 | Body 1 | 6 |\n| L | 36 | Body 1 | 8 |\n| XL | 44 | Body 2 | 10 |\n\nThe size choice determines the height and rounding corners of the control, its paddings, and text size.\n\nThe corner radius depends on the size and is set by variables.\n\n1. **S.** Use it where the standard control is too large (tables, small cards).\n2. **M.** This is the main size, use it in most forms and filters.\n3. **L.** Very rarely used.\n4. **XL.** Use it in communication environments, i.e., websites and landing pages.\n\n## Usage recommendations\n\n1. **Working with the field**\n   - Choose the **field width** depending on the content size. For instance, you can make the element wider for long values or multiple selection.\n   - Use **one size** with other complementary components in the form. If you chose to work with M, the other components should be of the same size.\n   - Use the **cross icon for clearing** multiple selection: this is more convenient and fast.\n   - You cannot change the height of the control. We only provide the **fixed field size**.\n\n2. **Outline label**\n\n   ![14.png](/static/images/design/Select/select-0014.png)\n\n   - A brief field name (should not exceed one line).\n   - When using it in forms, align it with the value inside the field.\n\n3. **Hint with a tooltip**\n\n   ![15.png](/static/images/design/Select/select-0015.png)\n\n   - Additional hint about the choice, shown when hovering over the question mark icon.\n   - Use it when you need to explain the label.\n\n4. **Description**\n\n   ![16.png](/static/images/design/Select/select-0016.png)\n\n   - It can be located below the field or to the right of the field.\n   - Use it in special cases to make additional clarifications about the choice or give explanations for the chosen values."},{id:"skeleton",title:"Skeleton",description:"",content:"Animated placeholder that replaces actual content during content loading until the interface is ready for user interaction. Used if loading time does not exceed 300 ms.\n\n### Structure\n\nDepending on the content, can take the shape of a rectangle, a circle, or a combination of the two.\n\n![IMG - 11.png](/static/images/design/Skeleton/IMG_-_11.png)\n\n### Sizes\n\nThe component adapts to the content container that it replaces during loading.\n\n### Use cases\n\n1. Can show the entire page\n![Frame 1.png](/static/images/design/Skeleton/Frame_1.png)\n\n2. Can replace only a portion of the content, allowing interaction with the rest of the interface\n![Frame 2.png](/static/images/design/Skeleton/Frame_2.png)\n\n### Recommendations\n\n**Use**\n\n1. When the content type can be predicted after loading\n2. Loading time is less than 300 ms\n3. If the skeleton is used for asynchronous loading, it should be displayed exactly where the loading happens because loading one block of elements should not block the rest of the interface.\n\n![IMG - 88.png](/static/images/design/Skeleton/IMG_-_88.png)\n\n**Don't use**\n\n1. If loading takes more than three seconds, it’s better to use a spin, or a loader,\n2. If the loading time exceeds 10 seconds and the exact duration is known, a progress bar should be displayed.\n3. When loading is initiated by a button click, using the state of the button as feedback is sufficient, especially in modal windows."},{id:"spin",title:"Spin",description:"",content:"Is an indicator that shows the progress of a task, such as loading, uploading data, processing, and so on, until the interface is completely ready for user interaction. The indicator does not show measurable progress but rather that the process has not yet been completed and is still ongoing.\n\n### Application\n\nUsed in situations when the Loader component is not applicable. For example, when the indicator container is smaller or equal in size, so the loader disrupts the visual balance.\n\n![example](/static/images/design/Spin/example.png)\n\n![IMG - 122.png](/static/images/design/Spin/IMG_-_122.png)\n\n### Sizes\n\n![IMG - 1222.png](/static/images/design/Spin/IMG_-_1222.png)\n\nThe component's size is adjusted to match the font height of the text next to it, the container, or other adjacent elements."},{id:"switch",title:"Switch",description:"",content:'## Description\n\nThis component is an interactive control that can switch between two states: enabled (on) and disabled (off). It is used to enable or disable certain features, options, or settings.\n\n![Description](/static/images/design/Switch/description.png)\n\n## Dimensions\n\nSwitch has two main sizes:\n\n![Sizes](/static/images/design/Switch/Sizes.png)\n\n- **M (Medium)**: For standard use cases. It offers most users an intuitive visual experience.\n- **L (Large)**: Used when the element needs to be highlighted or when a larger font size is preferable.\n\n## States\n\nSwitch has four main states:\n\n![States](/static/images/design/Switch/States.png)\n\n1. **Off**: an inactive state in which the option or feature is disabled.\n2. **On**: an active state in which the option or feature is enabled.\n3. **Hover**: when a user hovers over the element, it responds visually to indicate that it can be interacted with.\n4. **Disabled**: a state in which the element is inactive and cannot be interacted with.\n\n## Properties\n\nThe component can enable/disable the label. The label is disabled by default, but it can be enabled using the "Label" property.\n\nKeep in mind that if the element is resized, the size of the label will be adjusted accordingly:\n\n![Labels](/static/images/design/Switch/Labels.png)\n\n- 13px is the font size for size M labels\n- 15px is the font size for size L labels\n\n## User guide\n\nTo maintain the visual cohesion and consistency of the interface, use a switch if turning it on/off causes immediate changes in certain options or the overall state of the page. We do not recommend using the switch and the action confirmation button together. In these situations, it is better to use a checkbox.'},{id:"table",title:"Table",description:"",content:"The table is used for intuitive display of structured data of any size.\n\nAn atomic element of the table is a cell. Cells form columns and rows in the table. The table always has a header.\n\n## **Table cell**\n\nA cell is a container at the intersection of a row and a column of the table, into which you can place other components:\n\n- Text\n- Icons\n- [Buttons](/design/guides/button)\n- [Labels](/design/guides/label)\n- [User avatar](/design/guides/user-avatar)\n- [Progress bar](/design/guides/progress-bar)\n- Checkbox\n- [Select](/design/guides/select)\n- [Input](/design/guides/text-input) and other components\n\nA single cell can contain either a single component (for example, text), or a combination of components (e.g., a checkbox, text, and icon).\n\n![1.png](/static/images/design/Table/table-0001.png)\n\nA cell can be empty if there is no data to display in it. Moreover, the cell content can be hidden in its normal state and become visible when you hover over the cell or row.\n\n### **Recommendations for using components**\n\n- Do not use more than three different components in a cell: this makes data in the column with such cells harder to compare, and makes the table less readable. In such cases, you can create a separate column for the property that each component describes.\n- Choose the component sizes in the table based on your current task. For plain text data, better use the text-body-1 style without decoration, and for other elements, use size M.\n- We recommend to use components of the same size within a cell, for example, labels and buttons of size M.\n\n### Cell height and width\n\nThe cell size is determined by the size of its content and cell paddings.\n\nThe standard cell height with single-line text, styled as text-subheader-1 (line spacing 18px), is 40px. Both the top and bottom cell paddings in this case are 11px.\n\nFor a cell with two-line text, the cell height is 58px.\n\n![2.png](/static/images/design/Table/table-0002.png)\n\nYou can use any paddings at the top, bottom, left, and right, but we recommend a system of paddings which are multiples of 4px. The top and bottom paddings are usually the same, but you can make them different. The same applies to left and right paddings (for more details, see the description of the rows and columns in the table). The top and bottom paddings do not have to be equal to the left and right ones.\n\n### Separator\n\nEach cell has a horizontal separator of 1px in height. This separator is aligned with the bottom edge of the cell, its width equals the cell width. You may omit the separator for the cells of the last row in the table.\n\n### Alignment\n\nThe content inside a cell can be left-aligned or right-aligned (for more details on text alignment, see the column descriptions).\n\n## **Table** header\n\nThe table header is located at the top of the table and contains column names. In addition to names, the header can also contain checkboxes and buttons.\n\n![3.png](/static/images/design/Table/table-0003.png)\n\nAvoid two-line column names to prevent line breaks. When the name wraps to the second and other lines, the height of the header increases. Other names and buttons remain aligned to the top in this case.\n\n![4.png](/static/images/design/Table/table-0004.png)\n\n## **Table columns**\n\nA column is a group of cells arranged vertically. Depending on the type of content in the cells, the data in the column can be:\n\n- Sorted\n- Right-aligned\n\n### Sorting\n\nIf the data in the column can be sorted (e.g., alphabetically, by time, or by size), an arrow icon is placed next to the column name. When the user clicks on the icon name, rows are sorted by this column.\n\n![5.png](/static/images/design/Table/table-0005.png)\n\nSorting is an optional functionality in the table. It is available in specific use cases.\n\nYou cannot sort the table by two columns in parallel.\n\nTypically, if data in a column can be sorted, such data should have the same measurement unit. To avoid specifying the unit in every column cell, add it to the column name with a comma.\n\n### Right-aligned content\n\nThis feature is only available for text data and is used for comparing data (for example, time spent or resources consumed). Such data often has the same unit and you can sort it. For right-aligned column data with a sorting arrow, place the arrow first, followed by text.\n\n![6.png](/static/images/design/Table/table-0006.png)\n\n### Column locking at scroll\n\nIf the table does not fit within the screen borders, a horizontal scrollbar appears. In such cases, you can lock certain table columns so they always remain on the screen. You can lock the first or last columns of the table. You can use any number of locked columns, but make sure there is enough space for the scrolling columns, considering the minimum supported viewport width.\n\nWhen locked, these column cells get an additional separator: it is placed on the right if the column is left-locked and on the left if the column is right-locked. This separator will limit scrolling of other cells.\n\n![7.png](/static/images/design/Table/table-0007.png)\n\nIn the rightmost column, you can add actions for a row. These actions can be accessed under a three-dot icon, which expands into a list. Lock this column at scroll so that the user can always access the actions. Place the gear icon, which opens the table column configurations when clicked, in the header of such a column.\n\n![8.png](/static/images/design/Table/table-0008.png)\n\n### Column setup\n\nUsers can customize the number and order of columns. For this, add a gear icon in the header of the last table column. When the user clicks the gear icon, a settings popup appears.\n\n![9.png](/static/images/design/Table/table-0009.png)\n\n## **Table rows**\n\nA row is a group of cells arranged horizontally.\n\n### Clickable rows\n\nWhen users click on a table row, they can be directed to another page, a modal window, or a sidebar. When hovering over such rows, the background color changes to --g-color-base-simple-hover.\n\n![10.png](/static/images/design/Table/table-0010.png)\n\nFor a more neat display of hover over a clickable table row, you can add small margins on the left and right. With these margins, the content no longer aligns to the grid. Hence, we do not recommend these margins in cases without hover.\n\n### Rows with bulk operations\n\nYou can apply bulk actions to rows where the first cell contains a checkbox. A set of group actions most often matches the set of individual actions with one table row.\n\nIf a row is selected, its background color changes to --g-color-base-selection, and an action bar with a list of group actions appears at the bottom of the page.\n\n![11.png](/static/images/design/Table/table-0011.png)\n\nIf different actions are available for different table rows, we recommend displaying only those actions in the action bar that are available for all selected rows. Other behaviors can be enabled at the designer discretion.\n\n### Content alignment\n\nFor rows where the cell height is more than 40px, the content can be top-aligned or centered in cells.\n\nTop alignment is preferable because it improves data readability. In this case, all components containing text should be aligned to the first line.\n\n![12.png](/static/images/design/Table/table-0012.png)\n\nIf a top-aligned row contains icons, user avatars, icon buttons, checkboxes, progress bars, and other non-textual elements, set their top paddings so that their horizontal axis matches the text axis in a one-line cell.\n\n![13.png](/static/images/design/Table/table-0013.png)\n\nYou can use center alignment when it is difficult to fine-tune top cell margins for all types of content in one row, or when alignment does not affect content readability.\n\n## Usage recommendations\n\nUse tables:\n\n- To organize a large volume of homogeneous data that describes the properties of an object.\n- To sort and compare data on your page.\n- To quickly find values by sorting, filtering, and scanning the table content.\n\nWe do not recommend:\n\n- To use tables for describing objects with a single property. A list is a better option for such cases.\n   For example, you should use a list to present information about the color name and its HEX encoding.\n- To use tables to describe objects that have distinct heterogeneous properties. Better describe each object individually in this case.\n   Say, for example, your task is to describe devices used by an employee. Such devices can include a laptop (properties: OS, storage capacity, screen size), a computer mouse (properties: wired or wireless), and a desk lamp (properties: manufacturer, mount type). Do not add all this data into a single table and try to come up with a different visualization method."},{id:"tabs",title:"Tabs",description:"",content:"## Description\n\nWith the Tabs component, you can organize content by dividing it into several sections that the user can switch between for viewing. Use tabs to group related sections and provide quick access to each of them.\n\n![1.png](/static/images/design/Tabs/tabs-0001.png)\n\n## Sizes\n\nTabs can have three sizes:\n\n![2.png](/static/images/design/Tabs/tabs-0002.png)\n\n- **M (Medium):** Use this size for general use on pages, within individual sections.\n- **L (Large):** Use size L if the tabs also serve as page subheadings. In this case, tab content is a separate section on the page, and tabs are subheadings of this section.\n- **XL (Extra Large)**: This size is appropriate when tabs also serve as page headings. In this case, when users switch tabs, the content on the entire page changes.\n\n## States\n\nTabs can have the following states:\n\n![3.png](/static/images/design/Tabs/tabs-0003.png)\n\n- **Inactive**: The tab is in an inactive state when it is not selected. In this state, the tab has a more faded color to highlight the active tab.\n- **Active**: This status is assigned to the selected tab which displays the current active section of the content. Active tabs have more saturated colors and are underlined for emphasis.\n- **Hover**: When the user hovers over the tab, the pointer changes its style to indicate the possibility of interaction.\n- **Disabled**: Tabs can be disabled if they are temporarily or permanently unavailable for selection. Such tabs are grayed-out and are inactive for interaction.\n\n## Properties\n\nYou can enable/disable the following elements for each tab:\n\n![4.png](/static/images/design/Tabs/tabs-0004.png)\n\n1. Icon. Used at the designer discretion to visualize the type of content inside the tab.\n2. Label. The section name in text format.\n3. Counter. You can use it to indicate the number of entities inside a tab. You can also use it to specify the number of new entities that emerged in the tab.\n4. Label. You can use it to denote the status of the section that the tab is responsible for.\n\n## Usage recommendations\n\nUse tabs to organize large volumes of content or to divide information into logical sections. Ensure a clear and easily readable structure for tab headings.\n\nSelect tab style and colors that match the overall design of your project. Always highlight active tabs so that users can easily identify the current section.\n\nWhenever possible, try to make your M and L tab sections fit into a single screen height. This way, you can easily associate the content with the tab name, and see where the tab content ends and the next block begins."},{id:"text-area",title:"Text Area",description:"",content:"A component for entering arbitrary text, numeric, and symbolic values into multiple rows. Most commonly used for description when creating entities or entering messages in forms and dialog boxes.\n\n## **Application**\n\nUnlike [TextInput,](/design/guides/text-input) it has the height of the sum of rows and is used to enter data in free form with any combination of letters, numbers, or symbols.\n\nThe minimum height is one row, but we recommend using a component with two or more rows.\n\n![Rows](/static/images/design/TextArea/Rows.png)\n\nIf the number of rows is not specified, the height is calculated automatically based on the amount of content.\n\n![Auto](/static/images/design/TextArea/Auto.png)\n\n✅ **When to use**\n\n1. When more than one line of text is required.\n2. When the text must be a lengthy description or a message containing a lot of characters.\n3. When it is added to a form with fields that must be filled out.\n\n\uD83D\uDEAB\xa0**When to not use**\n\n1. When a filter, authorization form field, or search string is required.\n2. When a small number of characters are required (less than 5 words). For this purpose, we recommend using [TextInput](/design/guides/text-input), a component for single-line text input.\n\n## Types\n\nTextInput has two types: **Normal** and **Clear**, which have the same set of functions but look and are used differently depending on the context.\n\n![Normal, Clear](/static/images/design/TextArea/Normal_Clear.png)\n\n**Normal**\n\n- The most commonly used type.\n- One distinguishing feature of this component is its internal padding and corner radius. These parameters are determined by the element's size and are defined by a specific variable for corner radius (more information [here](/design/branding/corner-radius)), as well as a 1px stroke.\n- Used in forms when free space between components is required, such as padding between form elements.\n\n{/* ![Console. Creating a cluster.](/static/images/design/TextArea/Console.png)\n\nConsole. Creating a cluster.\n\n![DataLens. Creating a collection.](/static/images/design/TextArea/Datal.png)\n\nDataLens. Creating a collection. */}\n\n**Clear**\n\n- This component's defining characteristic is the absence of a border, with elements positioned within the margins of the input field.\n- Used when the type Normal creates visual noise.\n- When using this type, make sure that the purpose of this component is clear to the user.\n\n{/* ![Yandex GPT. Entering instructions.](/static/images/design/TextArea/Chat_GPT.png)\n\nYandex GPT. Entering instructions. */}\n\n## Structure\n\n![Structure.png](/static/images/design/TextArea/Structure.png)\n\n**1. Value**\n\n![Active.png](/static/images/design/TextArea/Active.png)\n\n- Is a required element.\n- Can be used as a hint (placeholder) and as entered text.\n- The entered text replaces the hint.\n\n**2. Clear button**\n\n![Clear Button](/static/images/design/TextArea/ClearButton.png)\n\n- Is an optional component.\n- Used when the field content needs to be erased.\n- Displayed when at least one character has been entered in the field.\n- Displayed even when the focus is outside the field.\n- Is a Button component of type Flat-secondary that inherits all of its properties. For example, the background of the cross is filled on hover.\n- When clicking on the clear button, the focus shifts to the field, and the entered value is erased.\n**3. Additional content**\n\n![Structure2.png](/static/images/design/TextArea/Structure2.png)\n\n- Is an optional element and is embedded at the bottom right.\n- Used when additional text must be added to the outside.\n- The text is aligned to the right.\n- For example, can be used as a counter (character input counter).\n\n\n**4. Error icon**\n\n![Error icon](/static/images/design/TextArea/8.png)\n\n- Is displayed only in the Inline Error state.\n- Works together with Tooltip, offering error descriptions upon hovering over an icon, to achieve a more compact layout of the form.\n\n**5. Error message**\n\n![Error message](/static/images/design/TextArea/9.png)\n\n- Is displayed only in the Outline Error state.\n- Is embedded at the bottom left.\n\n## States\n\n![States.png](/static/images/design/TextArea/States.png)\n\nHas the following states: **Suggest, Default, Hover, Active, Disabled, Inline Error, and Outline Error.**\n\n1. **Suggest.** Inactive state when there is no direct interaction with the component and no data has been entered. In this state, the value may serve as a hint, indicating to the user what kind of information should be entered into the field.\n2. **Default.** Inactive state when there is no direct interaction with the component and data has already been entered. In this state, the hint value changes based on the user's input.\n3. **Hover.** Active state when the cursor hovers over the component area.\n4. **Active.** Active state, triggered by transitioning from the previous component or by clicking on with the cursor. The state resets upon transitioning to a different component or clicking the cursor on an empty area.\n5. **Disabled.** Inactive state of a component when it is not possible to interact with it.\n6. **Outline error.** Active state of the component when an error occurs during validation and is displayed at the bottom of the field along with an explanation.\n7. **Inline error.** Active state of the component when a field validation error occurs, but the error is not displayed. Instead, the error is represented by a special icon that, when hovered over, displays an error Tooltip.\n\n## Sizes\n\n![Sizes.png](/static/images/design/TextArea/Sizes.png)\n\nThe component comes in four sizes: **S, M, L, and XL.**\n\nThe height and corner radius of the field, as well as the padding inside the field and the size of the text, vary based on the size of the component.\n\nThe corner radius depends on the size and is set by [variables](/design/branding/corner-radius).\n\n1. **S** (-g-border-radius-s: 5px;) – used when the standard input is too large (e.g., tables, small cards).\n2. **M** (-g-border-radius-m: 6px;) – basic size, used in most forms and filters.\n3. **L** (-g-border-radius-l: 8px;) – used for search (e.g., service search).\n4. **ХL** (-g-border-radius-xl: 10px;) – used in the communication environment (e.g., website and landing pages).\n\n## User guide\n\n**1. Working with the field**\n\n- The field may vary in height. [TextInput](/design/guides/text-input) can be used for single-line input.\n- We don't recommend including a **hint** within a field, as the field name will not be visible upon entering a value, unless you have limited space or the purpose of the field is clear to the user.\n- Use the **same size** for all of the complementary components of the form. If you selected size M, all of the other components should be the same size.\n\n**2. External field header**\n\n![External field header](/static/images/design/TextArea/12.png)\n\n- A short field name, preferably limited to one line.\n- The component should be placed in line with the field's value, unless the context is mobile or the Dialog size is S, in which case the component's title is displayed on top of the component.\n\n**3. Hint with tooltip**\n\n![Hint with tooltip](/static/images/design/TextArea/13.png)\n\n- Instructions for filling out the field when hovering over the icon with a question mark.\n- Used when the title and meaning should be clarified.\n- Should not include more than two paragraphs of text.\n\n**4. Additional description**\n\n![Additional description](/static/images/design/TextArea/14.png)\n\n- Can be found at the bottom or to the right of the field.\n- Used in rare cases when it is unclear how to fill out a field without an additional description or when explanations for previously entered values are required."},{id:"text-input",title:"Text Input",description:"",content:"A component for entering arbitrary text, numeric, and symbolic values in a single line. Can be used in page forms and dialog boxes, as well as in login, search, and filter forms.\n\n## **Application**\n\nUnlike [TextArea](/design/guides/text-area), it does not change height during the input and is used for simple free-form data with any combination of letters, numbers, or symbols.\n\n![1.png](/static/images/design/TextInput/1.png)\n\nWhen entering text that exceeds the width of the field, you can scroll through the content to the left and right.\n\n![2.png](/static/images/design/TextInput/2.png)\n\n✅ **When to use**\n\n1. When only one line of text is required.\n2. When selecting an option from a predetermined list is not possible.\n3. When there is enough space for data entry and there is no need for more complex input interfaces.\n\n\uD83D\uDEAB **When to not use**\n\n1. When a parameter can be entered only from a predefined list, as this may result in an error. For this purpose, consider using other components with a specific selection of value options, such as Select, Radio Button, Radio, and Checkbox.\n2. When a large number of characters must be entered (more than 5 words). For this purpose, we recommend using [TextArea](/design/guides/text-area), a component for multi-line text input.\n\n## Types\n\nTextInput has two types: **Normal** and **Clear**, which have the same set of functions but look and are used differently depending on the context.\n\n![3.png](/static/images/design/TextInput/3.png)\n\n**Normal**\n\n- The most commonly used type.\n- A distinctive feature of this component is its internal padding and corner radius. These parameters are determined by the element's size and a 1px stroke.\n- Used in forms when free space between components is required, such as padding between form elements.\n\n**Clear**\n\n- This component's defining characteristic is the absence of a border, with elements positioned within the margins of the input field.\n- Used when the type Normal creates visual noise.\n- When using this type, make sure that the purpose of this component is clear to the user.\n\n## Structure\n\n![4.png](/static/images/design/TextInput/4.png)\n\n**1. Left icon**\n\n![5.png](/static/images/design/TextInput/5.png)\n\n- Is an optional component.\n- The icon can be used for additional field identification.\n- If this is a search string, for example, a \"magnifying glass\" icon can be used. Or a \"key\" icon, if this is a password entry field.\n\n**2. Inline label.**\n\n![6.png](/static/images/design/TextInput/6.png)\n\n- Is an optional component.\n- Amplifies the value of the field name.\n- Replaces the external label.\n- Used as a field name because, when a value is entered, the hint disappears, leaving the purpose of the field unclear to the user.\n\n**3. Value**\n\n![7.png](/static/images/design/TextInput/7.png)\n\n- Is a required element.\n- Space used for the text of the hint and the entered text.\n- After one character is entered, the entered text replaces the hint.\n\n**4. Clear button**\n\n![Clear button](/static/images/design/TextInput/21.png)\n\n- Is an optional component.\n- Used when the field content needs to be erased.\n- Displayed when at least one character has been entered in the field.\n- Displayed even when the focus is outside the field.\n- Is a Button component of type Flat-secondary that inherits all of its properties. For example, the background of the cross is filled on hover.\n- When clicking on the clear button, the focus shifts to the field, and the entered value is erased.\n\n**5. Inline buttons**\n\n![11.png](/static/images/design/TextInput/11.png)\n\n- Is an optional element and is embedded on the right.\n- Used to more clearly indicate the relationship between content and actions and can be placed within a component.\n- The field allows for a maximum of two Button components.\n- The size of embedded buttons should be one size smaller than the component's own size. For example, if a size S is used, the button should be XS; if a size M is used, the button should be S; and so on.\n- For example, it can be used to confirm actions, send messages, or add additional filters to a field.\n\n**6. Additional content**\n\n![12.png](/static/images/design/TextInput/12.png)\n\n- Is an optional element and is embedded on the right.\n- Used when additional text is required inside.\n- The text is aligned to the right.\n- For example, can be used as a counter (counter of entered characters), for counting the number of values found in a search string, or for units of measurement.\n\n\n**7. Error icon**\n\n![Error icon](/static/images/design/TextInput/24.png)\n\n- Is displayed only in the Inline Error state.\n- Works together with Tooltip, offering error descriptions upon hovering over an icon, to achieve a compact layout of the form.\n\n**8. Error description**\n\n![Error description](/static/images/design/TextInput/25.png)\n\n- Is displayed only in the Outline Error state.\n- Is embedded at the bottom left.\n\n## States\n\nHas the following states: **Suggest, Default, Hover, Active, Disabled, Inline Error, and Outline Error.**\n\n![14.png](/static/images/design/TextInput/14.png)\n\n1. **Suggest.** Inactive state when there is no direct interaction with the component and no data has been entered. In this state, the value may serve as a hint, indicating to the user what kind of information should be entered into the field.\n2. **Default.** Inactive state when there is no direct interaction with the component and data has already been entered. In this state, the hint value changes based on the user's input.\n3. **Hover.** Active state when the cursor hovers over the component area.\n4. **Active.** Active state, triggered by transitioning from the previous component or by clicking on with the cursor. The state resets upon transitioning to a different component or clicking the cursor on an empty area.\n5. **Disabled.** Inactive state of a component when it is not possible to interact with it.\n6. **Outline error.** Active state of the component when an error occurs during validation and is displayed at the bottom of the field along with an explanation.\n7. **Inline error.** Active state of the component when a field validation error occurs, but the error is not displayed. Instead, the error is represented by a special icon that, when hovered over, displays an error Tooltip.\n\n## Sizes\n\n![16.png](/static/images/design/TextInput/16.png)\n\nThe component comes in four sizes: **S, M, L, and XL.**\n\nThe height and corner radius of the field, as well as the padding inside the field and the size of the text, vary based on the size of the component.\n\nThe corner radius depends on the size and is set by [variables](/design/branding/corner-radius).\n\n1. **S** (-g-border-radius-s: 5px;) – used when the standard input is too large (e.g., tables, small cards).\n2. **M** (-g-border-radius-m: 6px;) – basic size, used in most forms and filters.\n3. **L** (-g-border-radius-l: 8px;) – used for search (e.g., service search).\n4. **ХL** (-g-border-radius-xl: 10px;) – used in the communication environment (e.g., website and landing pages).\n\n## User guide\n\n**1. Working with the field**\n\n- The field can contain only one line. For this purpose, we recommend using [TextArea](/design/guides/text-area), a component for multiline text input.\n- We don't recommend including a **hint** within a field, as the field name will not be visible upon entering a value, unless you have limited space or the purpose of the field is clear to the user.\n- **The width of the field** must be the same as the width of the entered value. It informs the user of the expected input.\n- Use the **same size** for all of the complementary components of the form. If you selected size M, all of the other components should be the same size.\n\n**2. External field header**\n\n![Formating.png](/static/images/design/TextInput/Formating.png)\n\n- A short field name, preferably limited to one line.\n- In desktop forms, the component should be placed in line with the field's value. If the context is mobile or the Dialog size is S, the component's title is displayed on top of the component.\n\n**3. Hint with tooltip**\n\n![Tooltip.png](/static/images/design/TextInput/Tooltip.png)\n\n- Instructions for filling out the field when hovering over the icon with a question mark.\n- Used when the title should be clarified.\n- Should not include more than two paragraphs of text.\n\n**4. Additional description**\n\n![Description.png](/static/images/design/TextInput/Description.png)\n\n- Can be found at the bottom or to the right of the field.\n- Used in rare cases when it is unclear how to fill out a field without an additional description or when explanations for previously entered values are required.\n\n**5. Units of measurement** can be placed as follows:\n\n![s.png](/static/images/design/TextInput/s.png)\n\n- In the text description of the field, If there is enough space in the form.\n- Within the input field, if the description must be shortened.\n- To the right of the field, if space is needed for other elements inside the field, such as buttons or a clear (reset) icon.\n"},{id:"toaster",title:"Toaster",description:"",content:"Toaster is a small notification that appears on the screen to provide important information or a warning. It can be used to notify the user of an event or action, such as when a form is submitted or a file is downloaded.\n\n### Main types\n\n**Default**\n\nIt is used when there is no need for immediate action or when the message is not related to any specific actions or events.\n\n![Default](/static/images/design/Toaster/Default.png)\n\n**Info**\n\nIt is used to inform the user about a process, event, or action. For example, in the event of a successful data transfer or page load.\n\n![Info](/static/images/design/Toaster/Info.png)\n\n**Success**\n\nIt indicates that an operation or action has been completed successfully. For example, when data is successfully saved or when the user is authorized.\n\n![Success](/static/images/design/Toaster/Success.png)\n\n**Warning**\n\nIt informs the user about a potential problem or error. For example, if they need to fill out a required field on a form or if there is no Internet connection.\n\n![Warning](/static/images/design/Toaster/Warning.png)\n\n**Error**\n\nIt is used to indicate an error and that the user's attention is required to fix it. For example, if the data is entered incorrectly or there is a server error. This state is best paired with an action button that allows you to correct an error or get more information.\n\n![Error](/static/images/design/Toaster/Error.png)\n\n### Modifications\n\nToast is made up of five main components:\n\n![Modifications](/static/images/design/Toaster/Modifications.png)\n\n1. Toast type icon. A component can be used with or without an icon. An icon is an optional element.\n2. The header informs the user about the action being performed. If the description is included, the use of the header is optional.\n3. The description clarifies the title and can be used independently.\n4. Buttons. Toast may have one or two buttons; it is recommended that the first button be used as the action button. Buttons are optional elements.\n5. Exit Icon. The exit icon is an optional element. The close button is required, if there is no hide duration set on toast.\n\n### When to use a DLQ\n\nToasters are recommended for use in the following scenarios:\n\n- When submitting a form or performing an action, if you want the user to see the progress. Such as a message indicating that the data was successfully sent or that there was an error.\n- When you do not want to disrupt the user's workflow or block the screen. Toasters are displayed in the corner and do not cover the entire screen, allowing the user to continue using the interface.\n- When more information about a specific action is required. Toasts may include links to additional content or information that will help the user understand what happened.\n\n### When not to use\n\nToasters are not recommended for use in the following scenarios:\n\n- When an immediate user response is required.\n- When the action being performed at the moment of displaying toaster can cause problems or unwanted consequences.\n- When the message requires a large amount of information or a more detailed explanation.\n- When the information is already displayed on the screen in another form.\n\n### Position on screen\n\nToaster is displayed in the lower right corner.\n\nIts external margins are: bottom M (8px), right XL (20px).\n\n![Position](/static/images/design/Toaster/Position.png)\n\n### Customization\n\nToast's contents may differ from the standard one; it may include any available component from the library, if the use case requires it."},{id:"tooltip",title:"Tooltip",description:"",content:"**Tooltip** — a basic component on top of which [Action Tooltip](/design/guides/action-tooltip) is built. Is displayed upon hovering over a button and contains an explanation or additional information about the action that will be performed upon clicking the button.\n\nThe tooltip is only used when custom content must be included inside a hint. In other cases, it is recommended to use [Action Tooltip](/design/guides/action-tooltip).\n\n### Sizes and styles\n\nThe size of the tooltip is adjusted to the content. The color and style of the tooltip cannot be changed.\n\n![Sizes](/static/images/design/Tooltip/Sizes.png)\n\n\n### Content inside\n\nThe tooltip can contain any type of content. When designing tooltip content, it is recommended to follow general guidelines and indents.\n\n### Timing\n\nYou can change the timing of its appearance and disappearance based on its purpose. The tooltip appears with a 250-ms delay by default and disappears when the user moves the cursor away from the button.\n\nIf you think that most users will click on a button without reading the tooltip, it is best to use a delay instead of annoying them with too many prompts. If you think that few people will click the button without the tooltip, remove the delay so that the user does not have to wait for a description of the functionality.\n\n### Position\n\nThe position of the tooltip is selected with the goal of minimizing the overlap with page content. The optimal placement for the tooltip is where it overlaps the page content the least. (proper pictures with examples of its positioning on the page)\n\n![Position](/static/images/design/Tooltip/Position.png)\n"},{id:"user",title:"User",description:"",content:"A component for displaying an avatar along with the user name and contact information, with content that can be easily modified.\n\n# Structure\n\n![Specs3.png](/static/images/design/User/Specs3.png)\n\n1. User avatar (Avatar component)\n2. Username Block (Optional)\n3. Contact Block (Optional)\n\n# Size\n\n![7.png](/static/images/design/User/7.png)\n\n**XL** - 50x50px avatar + text frame that can be adjusted to the content width\n\n**L** - 42x42px avatar + text frame that can be adjusted to the content width\n\n**M** - 32x32px avatar (Default) + text frame that can be adjusted to the content width\n\n**S** - 28x28px avatar + text frame that can be adjusted to the content width\n\n**XS** - 24x24px avatar + text frame that can be adjusted to the content width\n\n# Types of content\n\n![11.png](/static/images/design/User/11.png)\n\n**Full Block (Default)**\n\nBy default, the component is configured to display the maximum amount of content, including an avatar, a name section, and a contact section.\n\n**Display without a user avatar**\n\nOptionally, the user avatar block can be disabled.\n\n# Functionality\n\n![10.png](/static/images/design/User/10.png)\n\n**Flexible configuration of an optional display**\n\nAny component block can be disabled if necessary."},{id:"user-label",title:"User Label",description:"",content:"UserLabel — a component for displaying a user profile or email\n\n# Structure\n\n![79.png](/static/images/design/UserLabel/79.png)\n\n➊ Avatar container (image, icon or initials)\n\n➋ Text container (email, username or login)\n\n➌ Closing icon\n\n# Size\n\n![80.png](/static/images/design/UserLabel/80.png)\n\n**XL** - 50x50px avatar + text frame that can be adjusted to the content width\n\n**L** - 42x42px avatar + text frame that can be adjusted to the content width\n\n**M** - 32x32px avatar (Default) + text frame that can be adjusted to the content width\n\n**S** - 28x28px avatar + text frame that can be adjusted to the content width\n\n**XS** - 24x24px avatar + text frame that can be adjusted to the content width\n\n# States\n\n![81.png](/static/images/design/UserLabel/81.png)\n\n\n# Types of content\n\n![82.png](/static/images/design/UserLabel/82.png)\n\n{/* **User avatar**\n\n![83.png](/static/images/design/UserLabel/83.png)\n\n**Icon**\n\n![84.png](/static/images/design/UserLabel/84.png)\n\n**Initials**\n\n![85.png](/static/images/design/UserLabel/85.png)\n\n**Without icon**\n\n--- */}\n\n# Scope\n\n![86.png](/static/images/design/UserLabel/86.png)\n\n**Theme**\n\nThe component has two themes. In the Clear theme, the outline, background, and icons of the component are disabled.\n\n![87.png](/static/images/design/UserLabel/87.png)\n\n**Icon type**\n\nThe component supports several types of icons by default. User avatars, email icons, or letter-based identifiers. Optionally, the icon can be replaced with a custom one.\n\n![88.png](/static/images/design/UserLabel/88.png)\n\n**Actions on click**\n\nThe component allows you to initiate custom events by clicking on the avatar in the component's text area, as well as events that are triggered by clicking on the 'X' icon."}]}]}}]);