(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7665],{52972:function(n,e,t){"use strict";t.r(e),t.d(e,{MarkdownEditor:function(){return y}});var o=t(85893),r=t(11347),i=t(91911),a=t(60938),l=t(81507),s=t(50254),d=t(68208),u=t(90684),c=t(5233),m=t(67294),f=t(31489);t(85089);var h=t(23493),p=t.n(h);let w=n=>{let e=n;for(;e;){let n=window.getComputedStyle(e).overflow;if("auto"===n||"scroll"===n)return e;e=e.parentElement}return window},k=(n,e)=>{let t=n;for(;t;){let n=getComputedStyle(t).getPropertyValue(e);if(n)return parseFloat(n);t=t.parentElement}return parseFloat(getComputedStyle(document.documentElement).getPropertyValue(e))||0};t(29909);let g=(0,f.Ge)("markdown-editor");function b(){let n=(0,r.Siq)({initialEditorMode:"wysiwyg",initialToolbarVisible:!0,allowHTML:!1,linkify:!0,breaks:!0,initialMarkup:"\n&nbsp;\n&nbsp;\nWelcome to the editor! Start typing the character `/`\n\n![](/static/images/markdown-editor/main.png =800x)\n\n## Markdown WYSIWYG and markup editor\n\nMarkdownEditor is a powerful tool for working with Markdown, which combines WYSIWYG and Markup modes. This means that you can create and edit content in a convenient visual mode, as well as have full control over the markup.\n&nbsp;\nThe editor supports following formats:\n\n* WYSIWYG\n\n* markup\n\nClick on the gear in the upper right corner to change the mode and see the `md` markup.\n\n&nbsp;\n### Various blocks included\n\n{% cut \"Combine different blocks\" %}\n\n{% note info \"Block for notes, tips, warnings, and alerts\" %}\n\nDepending on the content, notes with different titles and formats are used:\n\n* Note: provides additional information.\n* Tip: offers a recommendation.\n* Warning: issues a warning.\n* Alert: indicates a restriction.\n\n{% endnote %}\n\n> [Improve](https://github.com/gravity-ui/markdown-editor/blob/main/docs/how-to-add-preview.md) the editor interface\n> \n> *improved by you*\n\n{% endcut %}\n\nOr write your extension using a [convenient api](https://github.com/gravity-ui/markdown-editor/blob/main/docs/how-to-create-extension.md)\n\n&nbsp;\n### A user-friendly API is provided\n\nEasily connect to your React app with a hook:\n\n```plaintext\nimport React from 'react';\nimport { useMarkdownEditor, MarkdownEditorView } from '@gravity-ui/markdown-editor';\nimport { toaster } from '@gravity-ui/uikit/toaster-singleton-react-18';\n\nfunction Editor({ onSubmit }) {\n  const editor = useMarkdownEditor({ allowHTML: false });\n\n  React.useEffect(() => {\n    function submitHandler() {\n      // Serialize current content to markdown markup\n      const value = editor.getValue();\n      onSubmit(value);\n    }\n\n    editor.on('submit', submitHandler);\n    return () => {\n      editor.off('submit', submitHandler);\n    };\n  }, [onSubmit]);\n\n  return <MarkdownEditorView stickyToolbar autofocus toaster={toaster} editor={editor} />;\n}\n```\n\n&nbsp;\n### Convenient UX control is equipped\n\n#### Hot keys\n{% list tabs %}\n\n- WYSIWYG mode\n\n  \n  \n  |Formatting|Windows Shortcut|Mac OS Shortcut|\n  |:---|:---|:---|\n  |Bold text|Ctrl \\+ B|⌘ \\+ B|\n  |Italic|Ctrl \\+ I|⌘ \\+ I|\n  |Underlined text|Ctrl \\+ U|⌘ \\+ U|\n  |Strikethrough text|Ctrl \\+ Shift \\+ S|⌘ \\+ Shift \\+ S|\n\n- Markup mode\n  \n  \n  |Formatting|Markup|Result|\n  |:---|:---|:---|\n  |Bold text|`**Bold**`|**Bold**|\n  |Italic|`*Italic*`|*Italic*|\n  |Underlined text|`++Underlined++`|++Underlined++|\n  |Strikethrough text|`~~Strikethrough~~`|~~Strikethrough~~|\n\n{% endlist %}\n#### Context menu\nSelect this text and you will see a context menu **##like this##**:\n\n![](/static/images/markdown-editor/context-menu.png =360x)\n\n#### Auto-conversion\nQuickly create blocks by entering characters that will be replaced by blocks. For example, the automatic conversion of `-` and space creates a list, `>` and space creates a quote. Try it out.\n\n---\n\n### Current and future features\n\n[X] Some already finished things\n\n[ ] VS Code plugin\n\n[ ] Mobile version\n\n### And a multitude of other functionalities :sweat_smile: :fire:\n\nSee <https://github.com/gravity-ui/markdown-editor>\n\n&nbsp;\n"}),e=(0,m.useRef)(null);(0,m.useEffect)(()=>{let n=document.querySelector(".g-md-editor-component__toolbar");n&&(e.current=n)},[]);let t=function(n){let{throttleDelay:e=100,offsetCssVariable:t="--g-md-sticky-offset-compensate",cssVariableScope:o=null}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},[r,i]=(0,m.useState)(!1),[a,l]=(0,m.useState)(null);return(0,m.useEffect)(()=>{let r=w(n.current);if(n.current&&null===a){let e=k(o||document.documentElement,t);l(n.current.getBoundingClientRect().top-e)}let s=p()(()=>{null!==a&&i((null!=a?a:0)<=(r===window?window.scrollY:r.scrollTop))},e);return r.addEventListener("scroll",s),()=>{r.removeEventListener("scroll",s),s.cancel()}},[n,a,t,e,o]),r}(e);return(0,o.jsx)(r.uHI,{autofocus:!0,toaster:u.m,className:g({sticky:t}),stickyToolbar:!1,wysiwygToolbarConfig:r.K5T,markupToolbarConfig:r.mAR.bF,settingsVisible:!0,editor:n})}let y=()=>{let{t:n,i18n:e}=(0,c.$G)("markdown-editor");return(0,o.jsxs)(i.r,{className:g(),children:[(0,o.jsx)(a.X,{className:g("title"),children:(0,o.jsxs)(l.J,{sizes:12,className:g("heading"),children:[(0,o.jsx)("h1",{className:g("title"),children:n("title")}),(0,o.jsx)("div",{className:g("actions"),children:(0,o.jsx)(s.z,{href:(0,f.n6)("/libraries/markdown-editor",e),className:g("library-button"),size:"xl",view:"outlined-contrast",children:n("goToLibrary")})})]})}),(0,o.jsx)(a.X,{children:(0,o.jsx)(l.J,{sizes:12,children:(0,o.jsx)(d.f,{theme:"dark",children:(0,o.jsx)(b,{})})})})]})}},85089:function(){},29909:function(){},91343:function(){},22868:function(){},14777:function(){},99830:function(){},70209:function(){}}]);